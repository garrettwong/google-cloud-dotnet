// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: grafeas/v1/grafeas.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Grafeas.V1 {

  /// <summary>Holder for reflection information generated from grafeas/v1/grafeas.proto</summary>
  public static partial class GrafeasReflection {

    #region Descriptor
    /// <summary>File descriptor for grafeas/v1/grafeas.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GrafeasReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhncmFmZWFzL3YxL2dyYWZlYXMucHJvdG8SCmdyYWZlYXMudjEaHGdvb2ds",
            "ZS9hcGkvYW5ub3RhdGlvbnMucHJvdG8aG2dvb2dsZS9wcm90b2J1Zi9lbXB0",
            "eS5wcm90bxogZ29vZ2xlL3Byb3RvYnVmL2ZpZWxkX21hc2sucHJvdG8aH2dv",
            "b2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8aHGdyYWZlYXMvdjEvYXR0",
            "ZXN0YXRpb24ucHJvdG8aFmdyYWZlYXMvdjEvYnVpbGQucHJvdG8aF2dyYWZl",
            "YXMvdjEvY29tbW9uLnByb3RvGhtncmFmZWFzL3YxL2RlcGxveW1lbnQucHJv",
            "dG8aGmdyYWZlYXMvdjEvZGlzY292ZXJ5LnByb3RvGhZncmFmZWFzL3YxL2lt",
            "YWdlLnByb3RvGhhncmFmZWFzL3YxL3BhY2thZ2UucHJvdG8aG2dyYWZlYXMv",
            "djEvcHJvdmVuYW5jZS5wcm90bxoeZ3JhZmVhcy92MS92dWxuZXJhYmlsaXR5",
            "LnByb3RvIt0ECgpPY2N1cnJlbmNlEgwKBG5hbWUYASABKAkSFAoMcmVzb3Vy",
            "Y2VfdXJpGAIgASgJEhEKCW5vdGVfbmFtZRgDIAEoCRIiCgRraW5kGAQgASgO",
            "MhQuZ3JhZmVhcy52MS5Ob3RlS2luZBITCgtyZW1lZGlhdGlvbhgFIAEoCRIv",
            "CgtjcmVhdGVfdGltZRgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3Rh",
            "bXASLwoLdXBkYXRlX3RpbWUYByABKAsyGi5nb29nbGUucHJvdG9idWYuVGlt",
            "ZXN0YW1wEjwKDXZ1bG5lcmFiaWxpdHkYCCABKAsyIy5ncmFmZWFzLnYxLlZ1",
            "bG5lcmFiaWxpdHlPY2N1cnJlbmNlSAASLAoFYnVpbGQYCSABKAsyGy5ncmFm",
            "ZWFzLnYxLkJ1aWxkT2NjdXJyZW5jZUgAEiwKBWltYWdlGAogASgLMhsuZ3Jh",
            "ZmVhcy52MS5JbWFnZU9jY3VycmVuY2VIABIwCgdwYWNrYWdlGAsgASgLMh0u",
            "Z3JhZmVhcy52MS5QYWNrYWdlT2NjdXJyZW5jZUgAEjYKCmRlcGxveW1lbnQY",
            "DCABKAsyIC5ncmFmZWFzLnYxLkRlcGxveW1lbnRPY2N1cnJlbmNlSAASNAoJ",
            "ZGlzY292ZXJ5GA0gASgLMh8uZ3JhZmVhcy52MS5EaXNjb3ZlcnlPY2N1cnJl",
            "bmNlSAASOAoLYXR0ZXN0YXRpb24YDiABKAsyIS5ncmFmZWFzLnYxLkF0dGVz",
            "dGF0aW9uT2NjdXJyZW5jZUgAQgkKB2RldGFpbHMinwUKBE5vdGUSDAoEbmFt",
            "ZRgBIAEoCRIZChFzaG9ydF9kZXNjcmlwdGlvbhgCIAEoCRIYChBsb25nX2Rl",
            "c2NyaXB0aW9uGAMgASgJEiIKBGtpbmQYBCABKA4yFC5ncmFmZWFzLnYxLk5v",
            "dGVLaW5kEisKC3JlbGF0ZWRfdXJsGAUgAygLMhYuZ3JhZmVhcy52MS5SZWxh",
            "dGVkVXJsEjMKD2V4cGlyYXRpb25fdGltZRgGIAEoCzIaLmdvb2dsZS5wcm90",
            "b2J1Zi5UaW1lc3RhbXASLwoLY3JlYXRlX3RpbWUYByABKAsyGi5nb29nbGUu",
            "cHJvdG9idWYuVGltZXN0YW1wEi8KC3VwZGF0ZV90aW1lGAggASgLMhouZ29v",
            "Z2xlLnByb3RvYnVmLlRpbWVzdGFtcBIaChJyZWxhdGVkX25vdGVfbmFtZXMY",
            "CSADKAkSNgoNdnVsbmVyYWJpbGl0eRgKIAEoCzIdLmdyYWZlYXMudjEuVnVs",
            "bmVyYWJpbGl0eU5vdGVIABImCgVidWlsZBgLIAEoCzIVLmdyYWZlYXMudjEu",
            "QnVpbGROb3RlSAASJgoFaW1hZ2UYDCABKAsyFS5ncmFmZWFzLnYxLkltYWdl",
            "Tm90ZUgAEioKB3BhY2thZ2UYDSABKAsyFy5ncmFmZWFzLnYxLlBhY2thZ2VO",
            "b3RlSAASMAoKZGVwbG95bWVudBgOIAEoCzIaLmdyYWZlYXMudjEuRGVwbG95",
            "bWVudE5vdGVIABIuCglkaXNjb3ZlcnkYDyABKAsyGS5ncmFmZWFzLnYxLkRp",
            "c2NvdmVyeU5vdGVIABIyCgthdHRlc3RhdGlvbhgQIAEoCzIbLmdyYWZlYXMu",
            "djEuQXR0ZXN0YXRpb25Ob3RlSABCBgoEdHlwZSIkChRHZXRPY2N1cnJlbmNl",
            "UmVxdWVzdBIMCgRuYW1lGAEgASgJIl8KFkxpc3RPY2N1cnJlbmNlc1JlcXVl",
            "c3QSDgoGcGFyZW50GAEgASgJEg4KBmZpbHRlchgCIAEoCRIRCglwYWdlX3Np",
            "emUYAyABKAUSEgoKcGFnZV90b2tlbhgEIAEoCSJfChdMaXN0T2NjdXJyZW5j",
            "ZXNSZXNwb25zZRIrCgtvY2N1cnJlbmNlcxgBIAMoCzIWLmdyYWZlYXMudjEu",
            "T2NjdXJyZW5jZRIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAkiJwoXRGVsZXRl",
            "T2NjdXJyZW5jZVJlcXVlc3QSDAoEbmFtZRgBIAEoCSJVChdDcmVhdGVPY2N1",
            "cnJlbmNlUmVxdWVzdBIOCgZwYXJlbnQYASABKAkSKgoKb2NjdXJyZW5jZRgC",
            "IAEoCzIWLmdyYWZlYXMudjEuT2NjdXJyZW5jZSKEAQoXVXBkYXRlT2NjdXJy",
            "ZW5jZVJlcXVlc3QSDAoEbmFtZRgBIAEoCRIqCgpvY2N1cnJlbmNlGAIgASgL",
            "MhYuZ3JhZmVhcy52MS5PY2N1cnJlbmNlEi8KC3VwZGF0ZV9tYXNrGAMgASgL",
            "MhouZ29vZ2xlLnByb3RvYnVmLkZpZWxkTWFzayIeCg5HZXROb3RlUmVxdWVz",
            "dBIMCgRuYW1lGAEgASgJIigKGEdldE9jY3VycmVuY2VOb3RlUmVxdWVzdBIM",
            "CgRuYW1lGAEgASgJIlkKEExpc3ROb3Rlc1JlcXVlc3QSDgoGcGFyZW50GAEg",
            "ASgJEg4KBmZpbHRlchgCIAEoCRIRCglwYWdlX3NpemUYAyABKAUSEgoKcGFn",
            "ZV90b2tlbhgEIAEoCSJNChFMaXN0Tm90ZXNSZXNwb25zZRIfCgVub3RlcxgB",
            "IAMoCzIQLmdyYWZlYXMudjEuTm90ZRIXCg9uZXh0X3BhZ2VfdG9rZW4YAiAB",
            "KAkiIQoRRGVsZXRlTm90ZVJlcXVlc3QSDAoEbmFtZRgBIAEoCSJUChFDcmVh",
            "dGVOb3RlUmVxdWVzdBIOCgZwYXJlbnQYASABKAkSDwoHbm90ZV9pZBgCIAEo",
            "CRIeCgRub3RlGAMgASgLMhAuZ3JhZmVhcy52MS5Ob3RlInIKEVVwZGF0ZU5v",
            "dGVSZXF1ZXN0EgwKBG5hbWUYASABKAkSHgoEbm90ZRgCIAEoCzIQLmdyYWZl",
            "YXMudjEuTm90ZRIvCgt1cGRhdGVfbWFzaxgDIAEoCzIaLmdvb2dsZS5wcm90",
            "b2J1Zi5GaWVsZE1hc2siYQoaTGlzdE5vdGVPY2N1cnJlbmNlc1JlcXVlc3QS",
            "DAoEbmFtZRgBIAEoCRIOCgZmaWx0ZXIYAiABKAkSEQoJcGFnZV9zaXplGAMg",
            "ASgFEhIKCnBhZ2VfdG9rZW4YBCABKAkiYwobTGlzdE5vdGVPY2N1cnJlbmNl",
            "c1Jlc3BvbnNlEisKC29jY3VycmVuY2VzGAEgAygLMhYuZ3JhZmVhcy52MS5P",
            "Y2N1cnJlbmNlEhcKD25leHRfcGFnZV90b2tlbhgCIAEoCSKoAQoXQmF0Y2hD",
            "cmVhdGVOb3Rlc1JlcXVlc3QSDgoGcGFyZW50GAEgASgJEj0KBW5vdGVzGAIg",
            "AygLMi4uZ3JhZmVhcy52MS5CYXRjaENyZWF0ZU5vdGVzUmVxdWVzdC5Ob3Rl",
            "c0VudHJ5Gj4KCk5vdGVzRW50cnkSCwoDa2V5GAEgASgJEh8KBXZhbHVlGAIg",
            "ASgLMhAuZ3JhZmVhcy52MS5Ob3RlOgI4ASI7ChhCYXRjaENyZWF0ZU5vdGVz",
            "UmVzcG9uc2USHwoFbm90ZXMYASADKAsyEC5ncmFmZWFzLnYxLk5vdGUiXAod",
            "QmF0Y2hDcmVhdGVPY2N1cnJlbmNlc1JlcXVlc3QSDgoGcGFyZW50GAEgASgJ",
            "EisKC29jY3VycmVuY2VzGAIgAygLMhYuZ3JhZmVhcy52MS5PY2N1cnJlbmNl",
            "Ik0KHkJhdGNoQ3JlYXRlT2NjdXJyZW5jZXNSZXNwb25zZRIrCgtvY2N1cnJl",
            "bmNlcxgBIAMoCzIWLmdyYWZlYXMudjEuT2NjdXJyZW5jZTKUDgoHR3JhZmVh",
            "cxJ2Cg1HZXRPY2N1cnJlbmNlEiAuZ3JhZmVhcy52MS5HZXRPY2N1cnJlbmNl",
            "UmVxdWVzdBoWLmdyYWZlYXMudjEuT2NjdXJyZW5jZSIrgtPkkwIlEiMvdjEv",
            "e25hbWU9cHJvamVjdHMvKi9vY2N1cnJlbmNlcy8qfRKHAQoPTGlzdE9jY3Vy",
            "cmVuY2VzEiIuZ3JhZmVhcy52MS5MaXN0T2NjdXJyZW5jZXNSZXF1ZXN0GiMu",
            "Z3JhZmVhcy52MS5MaXN0T2NjdXJyZW5jZXNSZXNwb25zZSIrgtPkkwIlEiMv",
            "djEve3BhcmVudD1wcm9qZWN0cy8qfS9vY2N1cnJlbmNlcxJ8ChBEZWxldGVP",
            "Y2N1cnJlbmNlEiMuZ3JhZmVhcy52MS5EZWxldGVPY2N1cnJlbmNlUmVxdWVz",
            "dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIrgtPkkwIlKiMvdjEve25hbWU9",
            "cHJvamVjdHMvKi9vY2N1cnJlbmNlcy8qfRKIAQoQQ3JlYXRlT2NjdXJyZW5j",
            "ZRIjLmdyYWZlYXMudjEuQ3JlYXRlT2NjdXJyZW5jZVJlcXVlc3QaFi5ncmFm",
            "ZWFzLnYxLk9jY3VycmVuY2UiN4LT5JMCMSIjL3YxL3twYXJlbnQ9cHJvamVj",
            "dHMvKn0vb2NjdXJyZW5jZXM6Cm9jY3VycmVuY2USqwEKFkJhdGNoQ3JlYXRl",
            "T2NjdXJyZW5jZXMSKS5ncmFmZWFzLnYxLkJhdGNoQ3JlYXRlT2NjdXJyZW5j",
            "ZXNSZXF1ZXN0GiouZ3JhZmVhcy52MS5CYXRjaENyZWF0ZU9jY3VycmVuY2Vz",
            "UmVzcG9uc2UiOoLT5JMCNCIvL3YxL3twYXJlbnQ9cHJvamVjdHMvKn0vb2Nj",
            "dXJyZW5jZXM6YmF0Y2hDcmVhdGU6ASoSiAEKEFVwZGF0ZU9jY3VycmVuY2US",
            "Iy5ncmFmZWFzLnYxLlVwZGF0ZU9jY3VycmVuY2VSZXF1ZXN0GhYuZ3JhZmVh",
            "cy52MS5PY2N1cnJlbmNlIjeC0+STAjEyIy92MS97bmFtZT1wcm9qZWN0cy8q",
            "L29jY3VycmVuY2VzLyp9OgpvY2N1cnJlbmNlEn4KEUdldE9jY3VycmVuY2VO",
            "b3RlEiQuZ3JhZmVhcy52MS5HZXRPY2N1cnJlbmNlTm90ZVJlcXVlc3QaEC5n",
            "cmFmZWFzLnYxLk5vdGUiMYLT5JMCKxIpL3YxL3tuYW1lPXByb2plY3RzLyov",
            "b2NjdXJyZW5jZXMvKn0vbm90ZXMSXgoHR2V0Tm90ZRIaLmdyYWZlYXMudjEu",
            "R2V0Tm90ZVJlcXVlc3QaEC5ncmFmZWFzLnYxLk5vdGUiJYLT5JMCHxIdL3Yx",
            "L3tuYW1lPXByb2plY3RzLyovbm90ZXMvKn0SbwoJTGlzdE5vdGVzEhwuZ3Jh",
            "ZmVhcy52MS5MaXN0Tm90ZXNSZXF1ZXN0Gh0uZ3JhZmVhcy52MS5MaXN0Tm90",
            "ZXNSZXNwb25zZSIlgtPkkwIfEh0vdjEve3BhcmVudD1wcm9qZWN0cy8qfS9u",
            "b3RlcxJqCgpEZWxldGVOb3RlEh0uZ3JhZmVhcy52MS5EZWxldGVOb3RlUmVx",
            "dWVzdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIlgtPkkwIfKh0vdjEve25h",
            "bWU9cHJvamVjdHMvKi9ub3Rlcy8qfRJqCgpDcmVhdGVOb3RlEh0uZ3JhZmVh",
            "cy52MS5DcmVhdGVOb3RlUmVxdWVzdBoQLmdyYWZlYXMudjEuTm90ZSIrgtPk",
            "kwIlIh0vdjEve3BhcmVudD1wcm9qZWN0cy8qfS9ub3RlczoEbm90ZRKTAQoQ",
            "QmF0Y2hDcmVhdGVOb3RlcxIjLmdyYWZlYXMudjEuQmF0Y2hDcmVhdGVOb3Rl",
            "c1JlcXVlc3QaJC5ncmFmZWFzLnYxLkJhdGNoQ3JlYXRlTm90ZXNSZXNwb25z",
            "ZSI0gtPkkwIuIikvdjEve3BhcmVudD1wcm9qZWN0cy8qfS9ub3RlczpiYXRj",
            "aENyZWF0ZToBKhJqCgpVcGRhdGVOb3RlEh0uZ3JhZmVhcy52MS5VcGRhdGVO",
            "b3RlUmVxdWVzdBoQLmdyYWZlYXMudjEuTm90ZSIrgtPkkwIlMh0vdjEve25h",
            "bWU9cHJvamVjdHMvKi9ub3Rlcy8qfToEbm90ZRKZAQoTTGlzdE5vdGVPY2N1",
            "cnJlbmNlcxImLmdyYWZlYXMudjEuTGlzdE5vdGVPY2N1cnJlbmNlc1JlcXVl",
            "c3QaJy5ncmFmZWFzLnYxLkxpc3ROb3RlT2NjdXJyZW5jZXNSZXNwb25zZSIx",
            "gtPkkwIrEikvdjEve25hbWU9cHJvamVjdHMvKi9ub3Rlcy8qfS9vY2N1cnJl",
            "bmNlc0JRCg1pby5ncmFmZWFzLnYxUAFaOGdvb2dsZS5nb2xhbmcub3JnL2dl",
            "bnByb3RvL2dvb2dsZWFwaXMvZ3JhZmVhcy92MTtncmFmZWFzogIDR1JBYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.FieldMaskReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Grafeas.V1.AttestationReflection.Descriptor, global::Grafeas.V1.BuildReflection.Descriptor, global::Grafeas.V1.CommonReflection.Descriptor, global::Grafeas.V1.DeploymentReflection.Descriptor, global::Grafeas.V1.DiscoveryReflection.Descriptor, global::Grafeas.V1.ImageReflection.Descriptor, global::Grafeas.V1.PackageReflection.Descriptor, global::Grafeas.V1.ProvenanceReflection.Descriptor, global::Grafeas.V1.VulnerabilityReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1.Occurrence), global::Grafeas.V1.Occurrence.Parser, new[]{ "Name", "ResourceUri", "NoteName", "Kind", "Remediation", "CreateTime", "UpdateTime", "Vulnerability", "Build", "Image", "Package", "Deployment", "Discovery", "Attestation" }, new[]{ "Details" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1.Note), global::Grafeas.V1.Note.Parser, new[]{ "Name", "ShortDescription", "LongDescription", "Kind", "RelatedUrl", "ExpirationTime", "CreateTime", "UpdateTime", "RelatedNoteNames", "Vulnerability", "Build", "Image", "Package", "Deployment", "Discovery", "Attestation" }, new[]{ "Type" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1.GetOccurrenceRequest), global::Grafeas.V1.GetOccurrenceRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1.ListOccurrencesRequest), global::Grafeas.V1.ListOccurrencesRequest.Parser, new[]{ "Parent", "Filter", "PageSize", "PageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1.ListOccurrencesResponse), global::Grafeas.V1.ListOccurrencesResponse.Parser, new[]{ "Occurrences", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1.DeleteOccurrenceRequest), global::Grafeas.V1.DeleteOccurrenceRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1.CreateOccurrenceRequest), global::Grafeas.V1.CreateOccurrenceRequest.Parser, new[]{ "Parent", "Occurrence" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1.UpdateOccurrenceRequest), global::Grafeas.V1.UpdateOccurrenceRequest.Parser, new[]{ "Name", "Occurrence", "UpdateMask" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1.GetNoteRequest), global::Grafeas.V1.GetNoteRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1.GetOccurrenceNoteRequest), global::Grafeas.V1.GetOccurrenceNoteRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1.ListNotesRequest), global::Grafeas.V1.ListNotesRequest.Parser, new[]{ "Parent", "Filter", "PageSize", "PageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1.ListNotesResponse), global::Grafeas.V1.ListNotesResponse.Parser, new[]{ "Notes", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1.DeleteNoteRequest), global::Grafeas.V1.DeleteNoteRequest.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1.CreateNoteRequest), global::Grafeas.V1.CreateNoteRequest.Parser, new[]{ "Parent", "NoteId", "Note" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1.UpdateNoteRequest), global::Grafeas.V1.UpdateNoteRequest.Parser, new[]{ "Name", "Note", "UpdateMask" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1.ListNoteOccurrencesRequest), global::Grafeas.V1.ListNoteOccurrencesRequest.Parser, new[]{ "Name", "Filter", "PageSize", "PageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1.ListNoteOccurrencesResponse), global::Grafeas.V1.ListNoteOccurrencesResponse.Parser, new[]{ "Occurrences", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1.BatchCreateNotesRequest), global::Grafeas.V1.BatchCreateNotesRequest.Parser, new[]{ "Parent", "Notes" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1.BatchCreateNotesResponse), global::Grafeas.V1.BatchCreateNotesResponse.Parser, new[]{ "Notes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1.BatchCreateOccurrencesRequest), global::Grafeas.V1.BatchCreateOccurrencesRequest.Parser, new[]{ "Parent", "Occurrences" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Grafeas.V1.BatchCreateOccurrencesResponse), global::Grafeas.V1.BatchCreateOccurrencesResponse.Parser, new[]{ "Occurrences" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// An instance of an analysis type that has been found on a resource.
  /// </summary>
  public sealed partial class Occurrence : pb::IMessage<Occurrence> {
    private static readonly pb::MessageParser<Occurrence> _parser = new pb::MessageParser<Occurrence>(() => new Occurrence());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Occurrence> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1.GrafeasReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Occurrence() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Occurrence(Occurrence other) : this() {
      name_ = other.name_;
      resourceUri_ = other.resourceUri_;
      noteName_ = other.noteName_;
      kind_ = other.kind_;
      remediation_ = other.remediation_;
      createTime_ = other.createTime_ != null ? other.createTime_.Clone() : null;
      updateTime_ = other.updateTime_ != null ? other.updateTime_.Clone() : null;
      switch (other.DetailsCase) {
        case DetailsOneofCase.Vulnerability:
          Vulnerability = other.Vulnerability.Clone();
          break;
        case DetailsOneofCase.Build:
          Build = other.Build.Clone();
          break;
        case DetailsOneofCase.Image:
          Image = other.Image.Clone();
          break;
        case DetailsOneofCase.Package:
          Package = other.Package.Clone();
          break;
        case DetailsOneofCase.Deployment:
          Deployment = other.Deployment.Clone();
          break;
        case DetailsOneofCase.Discovery:
          Discovery = other.Discovery.Clone();
          break;
        case DetailsOneofCase.Attestation:
          Attestation = other.Attestation.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Occurrence Clone() {
      return new Occurrence(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Output only. The name of the occurrence in the form of
    /// `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resource_uri" field.</summary>
    public const int ResourceUriFieldNumber = 2;
    private string resourceUri_ = "";
    /// <summary>
    /// Required. Immutable. A URI that represents the resource for which the
    /// occurrence applies. For example,
    /// `https://gcr.io/project/image@sha256:123abc` for a Docker image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceUri {
      get { return resourceUri_; }
      set {
        resourceUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "note_name" field.</summary>
    public const int NoteNameFieldNumber = 3;
    private string noteName_ = "";
    /// <summary>
    /// Required. Immutable. The analysis note associated with this occurrence, in
    /// the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be
    /// used as a filter in list requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NoteName {
      get { return noteName_; }
      set {
        noteName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 4;
    private global::Grafeas.V1.NoteKind kind_ = 0;
    /// <summary>
    /// Output only. This explicitly denotes which of the occurrence details are
    /// specified. This field can be used as a filter in list requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1.NoteKind Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "remediation" field.</summary>
    public const int RemediationFieldNumber = 5;
    private string remediation_ = "";
    /// <summary>
    /// A description of actions that can be taken to remedy the note.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remediation {
      get { return remediation_; }
      set {
        remediation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// Output only. The time this occurrence was created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "update_time" field.</summary>
    public const int UpdateTimeFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updateTime_;
    /// <summary>
    /// Output only. The time this occurrence was last updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = value;
      }
    }

    /// <summary>Field number for the "vulnerability" field.</summary>
    public const int VulnerabilityFieldNumber = 8;
    /// <summary>
    /// Describes a security vulnerability.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1.VulnerabilityOccurrence Vulnerability {
      get { return detailsCase_ == DetailsOneofCase.Vulnerability ? (global::Grafeas.V1.VulnerabilityOccurrence) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.Vulnerability;
      }
    }

    /// <summary>Field number for the "build" field.</summary>
    public const int BuildFieldNumber = 9;
    /// <summary>
    /// Describes a verifiable build.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1.BuildOccurrence Build {
      get { return detailsCase_ == DetailsOneofCase.Build ? (global::Grafeas.V1.BuildOccurrence) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.Build;
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 10;
    /// <summary>
    /// Describes how this resource derives from the basis in the associated
    /// note.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1.ImageOccurrence Image {
      get { return detailsCase_ == DetailsOneofCase.Image ? (global::Grafeas.V1.ImageOccurrence) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.Image;
      }
    }

    /// <summary>Field number for the "package" field.</summary>
    public const int PackageFieldNumber = 11;
    /// <summary>
    /// Describes the installation of a package on the linked resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1.PackageOccurrence Package {
      get { return detailsCase_ == DetailsOneofCase.Package ? (global::Grafeas.V1.PackageOccurrence) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.Package;
      }
    }

    /// <summary>Field number for the "deployment" field.</summary>
    public const int DeploymentFieldNumber = 12;
    /// <summary>
    /// Describes the deployment of an artifact on a runtime.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1.DeploymentOccurrence Deployment {
      get { return detailsCase_ == DetailsOneofCase.Deployment ? (global::Grafeas.V1.DeploymentOccurrence) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.Deployment;
      }
    }

    /// <summary>Field number for the "discovery" field.</summary>
    public const int DiscoveryFieldNumber = 13;
    /// <summary>
    /// Describes when a resource was discovered.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1.DiscoveryOccurrence Discovery {
      get { return detailsCase_ == DetailsOneofCase.Discovery ? (global::Grafeas.V1.DiscoveryOccurrence) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.Discovery;
      }
    }

    /// <summary>Field number for the "attestation" field.</summary>
    public const int AttestationFieldNumber = 14;
    /// <summary>
    /// Describes an attestation of an artifact.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1.AttestationOccurrence Attestation {
      get { return detailsCase_ == DetailsOneofCase.Attestation ? (global::Grafeas.V1.AttestationOccurrence) details_ : null; }
      set {
        details_ = value;
        detailsCase_ = value == null ? DetailsOneofCase.None : DetailsOneofCase.Attestation;
      }
    }

    private object details_;
    /// <summary>Enum of possible cases for the "details" oneof.</summary>
    public enum DetailsOneofCase {
      None = 0,
      Vulnerability = 8,
      Build = 9,
      Image = 10,
      Package = 11,
      Deployment = 12,
      Discovery = 13,
      Attestation = 14,
    }
    private DetailsOneofCase detailsCase_ = DetailsOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetailsOneofCase DetailsCase {
      get { return detailsCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDetails() {
      detailsCase_ = DetailsOneofCase.None;
      details_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Occurrence);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Occurrence other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ResourceUri != other.ResourceUri) return false;
      if (NoteName != other.NoteName) return false;
      if (Kind != other.Kind) return false;
      if (Remediation != other.Remediation) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (!object.Equals(UpdateTime, other.UpdateTime)) return false;
      if (!object.Equals(Vulnerability, other.Vulnerability)) return false;
      if (!object.Equals(Build, other.Build)) return false;
      if (!object.Equals(Image, other.Image)) return false;
      if (!object.Equals(Package, other.Package)) return false;
      if (!object.Equals(Deployment, other.Deployment)) return false;
      if (!object.Equals(Discovery, other.Discovery)) return false;
      if (!object.Equals(Attestation, other.Attestation)) return false;
      if (DetailsCase != other.DetailsCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ResourceUri.Length != 0) hash ^= ResourceUri.GetHashCode();
      if (NoteName.Length != 0) hash ^= NoteName.GetHashCode();
      if (Kind != 0) hash ^= Kind.GetHashCode();
      if (Remediation.Length != 0) hash ^= Remediation.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (updateTime_ != null) hash ^= UpdateTime.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.Vulnerability) hash ^= Vulnerability.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.Build) hash ^= Build.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.Image) hash ^= Image.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.Package) hash ^= Package.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.Deployment) hash ^= Deployment.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.Discovery) hash ^= Discovery.GetHashCode();
      if (detailsCase_ == DetailsOneofCase.Attestation) hash ^= Attestation.GetHashCode();
      hash ^= (int) detailsCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ResourceUri.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ResourceUri);
      }
      if (NoteName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NoteName);
      }
      if (Kind != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Kind);
      }
      if (Remediation.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Remediation);
      }
      if (createTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CreateTime);
      }
      if (updateTime_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(UpdateTime);
      }
      if (detailsCase_ == DetailsOneofCase.Vulnerability) {
        output.WriteRawTag(66);
        output.WriteMessage(Vulnerability);
      }
      if (detailsCase_ == DetailsOneofCase.Build) {
        output.WriteRawTag(74);
        output.WriteMessage(Build);
      }
      if (detailsCase_ == DetailsOneofCase.Image) {
        output.WriteRawTag(82);
        output.WriteMessage(Image);
      }
      if (detailsCase_ == DetailsOneofCase.Package) {
        output.WriteRawTag(90);
        output.WriteMessage(Package);
      }
      if (detailsCase_ == DetailsOneofCase.Deployment) {
        output.WriteRawTag(98);
        output.WriteMessage(Deployment);
      }
      if (detailsCase_ == DetailsOneofCase.Discovery) {
        output.WriteRawTag(106);
        output.WriteMessage(Discovery);
      }
      if (detailsCase_ == DetailsOneofCase.Attestation) {
        output.WriteRawTag(114);
        output.WriteMessage(Attestation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ResourceUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceUri);
      }
      if (NoteName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NoteName);
      }
      if (Kind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      if (Remediation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remediation);
      }
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (updateTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateTime);
      }
      if (detailsCase_ == DetailsOneofCase.Vulnerability) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vulnerability);
      }
      if (detailsCase_ == DetailsOneofCase.Build) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Build);
      }
      if (detailsCase_ == DetailsOneofCase.Image) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      if (detailsCase_ == DetailsOneofCase.Package) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Package);
      }
      if (detailsCase_ == DetailsOneofCase.Deployment) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deployment);
      }
      if (detailsCase_ == DetailsOneofCase.Discovery) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Discovery);
      }
      if (detailsCase_ == DetailsOneofCase.Attestation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attestation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Occurrence other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ResourceUri.Length != 0) {
        ResourceUri = other.ResourceUri;
      }
      if (other.NoteName.Length != 0) {
        NoteName = other.NoteName;
      }
      if (other.Kind != 0) {
        Kind = other.Kind;
      }
      if (other.Remediation.Length != 0) {
        Remediation = other.Remediation;
      }
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.updateTime_ != null) {
        if (updateTime_ == null) {
          UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        UpdateTime.MergeFrom(other.UpdateTime);
      }
      switch (other.DetailsCase) {
        case DetailsOneofCase.Vulnerability:
          if (Vulnerability == null) {
            Vulnerability = new global::Grafeas.V1.VulnerabilityOccurrence();
          }
          Vulnerability.MergeFrom(other.Vulnerability);
          break;
        case DetailsOneofCase.Build:
          if (Build == null) {
            Build = new global::Grafeas.V1.BuildOccurrence();
          }
          Build.MergeFrom(other.Build);
          break;
        case DetailsOneofCase.Image:
          if (Image == null) {
            Image = new global::Grafeas.V1.ImageOccurrence();
          }
          Image.MergeFrom(other.Image);
          break;
        case DetailsOneofCase.Package:
          if (Package == null) {
            Package = new global::Grafeas.V1.PackageOccurrence();
          }
          Package.MergeFrom(other.Package);
          break;
        case DetailsOneofCase.Deployment:
          if (Deployment == null) {
            Deployment = new global::Grafeas.V1.DeploymentOccurrence();
          }
          Deployment.MergeFrom(other.Deployment);
          break;
        case DetailsOneofCase.Discovery:
          if (Discovery == null) {
            Discovery = new global::Grafeas.V1.DiscoveryOccurrence();
          }
          Discovery.MergeFrom(other.Discovery);
          break;
        case DetailsOneofCase.Attestation:
          if (Attestation == null) {
            Attestation = new global::Grafeas.V1.AttestationOccurrence();
          }
          Attestation.MergeFrom(other.Attestation);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            ResourceUri = input.ReadString();
            break;
          }
          case 26: {
            NoteName = input.ReadString();
            break;
          }
          case 32: {
            Kind = (global::Grafeas.V1.NoteKind) input.ReadEnum();
            break;
          }
          case 42: {
            Remediation = input.ReadString();
            break;
          }
          case 50: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 58: {
            if (updateTime_ == null) {
              UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdateTime);
            break;
          }
          case 66: {
            global::Grafeas.V1.VulnerabilityOccurrence subBuilder = new global::Grafeas.V1.VulnerabilityOccurrence();
            if (detailsCase_ == DetailsOneofCase.Vulnerability) {
              subBuilder.MergeFrom(Vulnerability);
            }
            input.ReadMessage(subBuilder);
            Vulnerability = subBuilder;
            break;
          }
          case 74: {
            global::Grafeas.V1.BuildOccurrence subBuilder = new global::Grafeas.V1.BuildOccurrence();
            if (detailsCase_ == DetailsOneofCase.Build) {
              subBuilder.MergeFrom(Build);
            }
            input.ReadMessage(subBuilder);
            Build = subBuilder;
            break;
          }
          case 82: {
            global::Grafeas.V1.ImageOccurrence subBuilder = new global::Grafeas.V1.ImageOccurrence();
            if (detailsCase_ == DetailsOneofCase.Image) {
              subBuilder.MergeFrom(Image);
            }
            input.ReadMessage(subBuilder);
            Image = subBuilder;
            break;
          }
          case 90: {
            global::Grafeas.V1.PackageOccurrence subBuilder = new global::Grafeas.V1.PackageOccurrence();
            if (detailsCase_ == DetailsOneofCase.Package) {
              subBuilder.MergeFrom(Package);
            }
            input.ReadMessage(subBuilder);
            Package = subBuilder;
            break;
          }
          case 98: {
            global::Grafeas.V1.DeploymentOccurrence subBuilder = new global::Grafeas.V1.DeploymentOccurrence();
            if (detailsCase_ == DetailsOneofCase.Deployment) {
              subBuilder.MergeFrom(Deployment);
            }
            input.ReadMessage(subBuilder);
            Deployment = subBuilder;
            break;
          }
          case 106: {
            global::Grafeas.V1.DiscoveryOccurrence subBuilder = new global::Grafeas.V1.DiscoveryOccurrence();
            if (detailsCase_ == DetailsOneofCase.Discovery) {
              subBuilder.MergeFrom(Discovery);
            }
            input.ReadMessage(subBuilder);
            Discovery = subBuilder;
            break;
          }
          case 114: {
            global::Grafeas.V1.AttestationOccurrence subBuilder = new global::Grafeas.V1.AttestationOccurrence();
            if (detailsCase_ == DetailsOneofCase.Attestation) {
              subBuilder.MergeFrom(Attestation);
            }
            input.ReadMessage(subBuilder);
            Attestation = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A type of analysis that can be done for a resource.
  /// </summary>
  public sealed partial class Note : pb::IMessage<Note> {
    private static readonly pb::MessageParser<Note> _parser = new pb::MessageParser<Note>(() => new Note());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Note> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1.GrafeasReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Note() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Note(Note other) : this() {
      name_ = other.name_;
      shortDescription_ = other.shortDescription_;
      longDescription_ = other.longDescription_;
      kind_ = other.kind_;
      relatedUrl_ = other.relatedUrl_.Clone();
      expirationTime_ = other.expirationTime_ != null ? other.expirationTime_.Clone() : null;
      createTime_ = other.createTime_ != null ? other.createTime_.Clone() : null;
      updateTime_ = other.updateTime_ != null ? other.updateTime_.Clone() : null;
      relatedNoteNames_ = other.relatedNoteNames_.Clone();
      switch (other.TypeCase) {
        case TypeOneofCase.Vulnerability:
          Vulnerability = other.Vulnerability.Clone();
          break;
        case TypeOneofCase.Build:
          Build = other.Build.Clone();
          break;
        case TypeOneofCase.Image:
          Image = other.Image.Clone();
          break;
        case TypeOneofCase.Package:
          Package = other.Package.Clone();
          break;
        case TypeOneofCase.Deployment:
          Deployment = other.Deployment.Clone();
          break;
        case TypeOneofCase.Discovery:
          Discovery = other.Discovery.Clone();
          break;
        case TypeOneofCase.Attestation:
          Attestation = other.Attestation.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Note Clone() {
      return new Note(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Output only. The name of the note in the form of
    /// `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "short_description" field.</summary>
    public const int ShortDescriptionFieldNumber = 2;
    private string shortDescription_ = "";
    /// <summary>
    /// A one sentence description of this note.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShortDescription {
      get { return shortDescription_; }
      set {
        shortDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "long_description" field.</summary>
    public const int LongDescriptionFieldNumber = 3;
    private string longDescription_ = "";
    /// <summary>
    /// A detailed description of this note.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LongDescription {
      get { return longDescription_; }
      set {
        longDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "kind" field.</summary>
    public const int KindFieldNumber = 4;
    private global::Grafeas.V1.NoteKind kind_ = 0;
    /// <summary>
    /// Output only. The type of analysis. This field can be used as a filter in
    /// list requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1.NoteKind Kind {
      get { return kind_; }
      set {
        kind_ = value;
      }
    }

    /// <summary>Field number for the "related_url" field.</summary>
    public const int RelatedUrlFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Grafeas.V1.RelatedUrl> _repeated_relatedUrl_codec
        = pb::FieldCodec.ForMessage(42, global::Grafeas.V1.RelatedUrl.Parser);
    private readonly pbc::RepeatedField<global::Grafeas.V1.RelatedUrl> relatedUrl_ = new pbc::RepeatedField<global::Grafeas.V1.RelatedUrl>();
    /// <summary>
    /// URLs associated with this note.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grafeas.V1.RelatedUrl> RelatedUrl {
      get { return relatedUrl_; }
    }

    /// <summary>Field number for the "expiration_time" field.</summary>
    public const int ExpirationTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expirationTime_;
    /// <summary>
    /// Time of expiration for this note. Empty if note does not expire.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ExpirationTime {
      get { return expirationTime_; }
      set {
        expirationTime_ = value;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// Output only. The time this note was created. This field can be used as a
    /// filter in list requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "update_time" field.</summary>
    public const int UpdateTimeFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updateTime_;
    /// <summary>
    /// Output only. The time this note was last updated. This field can be used as
    /// a filter in list requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = value;
      }
    }

    /// <summary>Field number for the "related_note_names" field.</summary>
    public const int RelatedNoteNamesFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_relatedNoteNames_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> relatedNoteNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Other notes related to this note.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RelatedNoteNames {
      get { return relatedNoteNames_; }
    }

    /// <summary>Field number for the "vulnerability" field.</summary>
    public const int VulnerabilityFieldNumber = 10;
    /// <summary>
    /// A note describing a package vulnerability.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1.VulnerabilityNote Vulnerability {
      get { return typeCase_ == TypeOneofCase.Vulnerability ? (global::Grafeas.V1.VulnerabilityNote) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Vulnerability;
      }
    }

    /// <summary>Field number for the "build" field.</summary>
    public const int BuildFieldNumber = 11;
    /// <summary>
    /// A note describing build provenance for a verifiable build.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1.BuildNote Build {
      get { return typeCase_ == TypeOneofCase.Build ? (global::Grafeas.V1.BuildNote) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Build;
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 12;
    /// <summary>
    /// A note describing a base image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1.ImageNote Image {
      get { return typeCase_ == TypeOneofCase.Image ? (global::Grafeas.V1.ImageNote) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Image;
      }
    }

    /// <summary>Field number for the "package" field.</summary>
    public const int PackageFieldNumber = 13;
    /// <summary>
    /// A note describing a package hosted by various package managers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1.PackageNote Package {
      get { return typeCase_ == TypeOneofCase.Package ? (global::Grafeas.V1.PackageNote) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Package;
      }
    }

    /// <summary>Field number for the "deployment" field.</summary>
    public const int DeploymentFieldNumber = 14;
    /// <summary>
    /// A note describing something that can be deployed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1.DeploymentNote Deployment {
      get { return typeCase_ == TypeOneofCase.Deployment ? (global::Grafeas.V1.DeploymentNote) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Deployment;
      }
    }

    /// <summary>Field number for the "discovery" field.</summary>
    public const int DiscoveryFieldNumber = 15;
    /// <summary>
    /// A note describing the initial analysis of a resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1.DiscoveryNote Discovery {
      get { return typeCase_ == TypeOneofCase.Discovery ? (global::Grafeas.V1.DiscoveryNote) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Discovery;
      }
    }

    /// <summary>Field number for the "attestation" field.</summary>
    public const int AttestationFieldNumber = 16;
    /// <summary>
    /// A note describing an attestation role.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1.AttestationNote Attestation {
      get { return typeCase_ == TypeOneofCase.Attestation ? (global::Grafeas.V1.AttestationNote) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.Attestation;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      Vulnerability = 10,
      Build = 11,
      Image = 12,
      Package = 13,
      Deployment = 14,
      Discovery = 15,
      Attestation = 16,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Note);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Note other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ShortDescription != other.ShortDescription) return false;
      if (LongDescription != other.LongDescription) return false;
      if (Kind != other.Kind) return false;
      if(!relatedUrl_.Equals(other.relatedUrl_)) return false;
      if (!object.Equals(ExpirationTime, other.ExpirationTime)) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (!object.Equals(UpdateTime, other.UpdateTime)) return false;
      if(!relatedNoteNames_.Equals(other.relatedNoteNames_)) return false;
      if (!object.Equals(Vulnerability, other.Vulnerability)) return false;
      if (!object.Equals(Build, other.Build)) return false;
      if (!object.Equals(Image, other.Image)) return false;
      if (!object.Equals(Package, other.Package)) return false;
      if (!object.Equals(Deployment, other.Deployment)) return false;
      if (!object.Equals(Discovery, other.Discovery)) return false;
      if (!object.Equals(Attestation, other.Attestation)) return false;
      if (TypeCase != other.TypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ShortDescription.Length != 0) hash ^= ShortDescription.GetHashCode();
      if (LongDescription.Length != 0) hash ^= LongDescription.GetHashCode();
      if (Kind != 0) hash ^= Kind.GetHashCode();
      hash ^= relatedUrl_.GetHashCode();
      if (expirationTime_ != null) hash ^= ExpirationTime.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (updateTime_ != null) hash ^= UpdateTime.GetHashCode();
      hash ^= relatedNoteNames_.GetHashCode();
      if (typeCase_ == TypeOneofCase.Vulnerability) hash ^= Vulnerability.GetHashCode();
      if (typeCase_ == TypeOneofCase.Build) hash ^= Build.GetHashCode();
      if (typeCase_ == TypeOneofCase.Image) hash ^= Image.GetHashCode();
      if (typeCase_ == TypeOneofCase.Package) hash ^= Package.GetHashCode();
      if (typeCase_ == TypeOneofCase.Deployment) hash ^= Deployment.GetHashCode();
      if (typeCase_ == TypeOneofCase.Discovery) hash ^= Discovery.GetHashCode();
      if (typeCase_ == TypeOneofCase.Attestation) hash ^= Attestation.GetHashCode();
      hash ^= (int) typeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ShortDescription.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ShortDescription);
      }
      if (LongDescription.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LongDescription);
      }
      if (Kind != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Kind);
      }
      relatedUrl_.WriteTo(output, _repeated_relatedUrl_codec);
      if (expirationTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ExpirationTime);
      }
      if (createTime_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CreateTime);
      }
      if (updateTime_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(UpdateTime);
      }
      relatedNoteNames_.WriteTo(output, _repeated_relatedNoteNames_codec);
      if (typeCase_ == TypeOneofCase.Vulnerability) {
        output.WriteRawTag(82);
        output.WriteMessage(Vulnerability);
      }
      if (typeCase_ == TypeOneofCase.Build) {
        output.WriteRawTag(90);
        output.WriteMessage(Build);
      }
      if (typeCase_ == TypeOneofCase.Image) {
        output.WriteRawTag(98);
        output.WriteMessage(Image);
      }
      if (typeCase_ == TypeOneofCase.Package) {
        output.WriteRawTag(106);
        output.WriteMessage(Package);
      }
      if (typeCase_ == TypeOneofCase.Deployment) {
        output.WriteRawTag(114);
        output.WriteMessage(Deployment);
      }
      if (typeCase_ == TypeOneofCase.Discovery) {
        output.WriteRawTag(122);
        output.WriteMessage(Discovery);
      }
      if (typeCase_ == TypeOneofCase.Attestation) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Attestation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ShortDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShortDescription);
      }
      if (LongDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LongDescription);
      }
      if (Kind != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Kind);
      }
      size += relatedUrl_.CalculateSize(_repeated_relatedUrl_codec);
      if (expirationTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExpirationTime);
      }
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (updateTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateTime);
      }
      size += relatedNoteNames_.CalculateSize(_repeated_relatedNoteNames_codec);
      if (typeCase_ == TypeOneofCase.Vulnerability) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vulnerability);
      }
      if (typeCase_ == TypeOneofCase.Build) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Build);
      }
      if (typeCase_ == TypeOneofCase.Image) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      if (typeCase_ == TypeOneofCase.Package) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Package);
      }
      if (typeCase_ == TypeOneofCase.Deployment) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deployment);
      }
      if (typeCase_ == TypeOneofCase.Discovery) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Discovery);
      }
      if (typeCase_ == TypeOneofCase.Attestation) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Attestation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Note other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ShortDescription.Length != 0) {
        ShortDescription = other.ShortDescription;
      }
      if (other.LongDescription.Length != 0) {
        LongDescription = other.LongDescription;
      }
      if (other.Kind != 0) {
        Kind = other.Kind;
      }
      relatedUrl_.Add(other.relatedUrl_);
      if (other.expirationTime_ != null) {
        if (expirationTime_ == null) {
          ExpirationTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ExpirationTime.MergeFrom(other.ExpirationTime);
      }
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.updateTime_ != null) {
        if (updateTime_ == null) {
          UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        UpdateTime.MergeFrom(other.UpdateTime);
      }
      relatedNoteNames_.Add(other.relatedNoteNames_);
      switch (other.TypeCase) {
        case TypeOneofCase.Vulnerability:
          if (Vulnerability == null) {
            Vulnerability = new global::Grafeas.V1.VulnerabilityNote();
          }
          Vulnerability.MergeFrom(other.Vulnerability);
          break;
        case TypeOneofCase.Build:
          if (Build == null) {
            Build = new global::Grafeas.V1.BuildNote();
          }
          Build.MergeFrom(other.Build);
          break;
        case TypeOneofCase.Image:
          if (Image == null) {
            Image = new global::Grafeas.V1.ImageNote();
          }
          Image.MergeFrom(other.Image);
          break;
        case TypeOneofCase.Package:
          if (Package == null) {
            Package = new global::Grafeas.V1.PackageNote();
          }
          Package.MergeFrom(other.Package);
          break;
        case TypeOneofCase.Deployment:
          if (Deployment == null) {
            Deployment = new global::Grafeas.V1.DeploymentNote();
          }
          Deployment.MergeFrom(other.Deployment);
          break;
        case TypeOneofCase.Discovery:
          if (Discovery == null) {
            Discovery = new global::Grafeas.V1.DiscoveryNote();
          }
          Discovery.MergeFrom(other.Discovery);
          break;
        case TypeOneofCase.Attestation:
          if (Attestation == null) {
            Attestation = new global::Grafeas.V1.AttestationNote();
          }
          Attestation.MergeFrom(other.Attestation);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            ShortDescription = input.ReadString();
            break;
          }
          case 26: {
            LongDescription = input.ReadString();
            break;
          }
          case 32: {
            Kind = (global::Grafeas.V1.NoteKind) input.ReadEnum();
            break;
          }
          case 42: {
            relatedUrl_.AddEntriesFrom(input, _repeated_relatedUrl_codec);
            break;
          }
          case 50: {
            if (expirationTime_ == null) {
              ExpirationTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpirationTime);
            break;
          }
          case 58: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 66: {
            if (updateTime_ == null) {
              UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdateTime);
            break;
          }
          case 74: {
            relatedNoteNames_.AddEntriesFrom(input, _repeated_relatedNoteNames_codec);
            break;
          }
          case 82: {
            global::Grafeas.V1.VulnerabilityNote subBuilder = new global::Grafeas.V1.VulnerabilityNote();
            if (typeCase_ == TypeOneofCase.Vulnerability) {
              subBuilder.MergeFrom(Vulnerability);
            }
            input.ReadMessage(subBuilder);
            Vulnerability = subBuilder;
            break;
          }
          case 90: {
            global::Grafeas.V1.BuildNote subBuilder = new global::Grafeas.V1.BuildNote();
            if (typeCase_ == TypeOneofCase.Build) {
              subBuilder.MergeFrom(Build);
            }
            input.ReadMessage(subBuilder);
            Build = subBuilder;
            break;
          }
          case 98: {
            global::Grafeas.V1.ImageNote subBuilder = new global::Grafeas.V1.ImageNote();
            if (typeCase_ == TypeOneofCase.Image) {
              subBuilder.MergeFrom(Image);
            }
            input.ReadMessage(subBuilder);
            Image = subBuilder;
            break;
          }
          case 106: {
            global::Grafeas.V1.PackageNote subBuilder = new global::Grafeas.V1.PackageNote();
            if (typeCase_ == TypeOneofCase.Package) {
              subBuilder.MergeFrom(Package);
            }
            input.ReadMessage(subBuilder);
            Package = subBuilder;
            break;
          }
          case 114: {
            global::Grafeas.V1.DeploymentNote subBuilder = new global::Grafeas.V1.DeploymentNote();
            if (typeCase_ == TypeOneofCase.Deployment) {
              subBuilder.MergeFrom(Deployment);
            }
            input.ReadMessage(subBuilder);
            Deployment = subBuilder;
            break;
          }
          case 122: {
            global::Grafeas.V1.DiscoveryNote subBuilder = new global::Grafeas.V1.DiscoveryNote();
            if (typeCase_ == TypeOneofCase.Discovery) {
              subBuilder.MergeFrom(Discovery);
            }
            input.ReadMessage(subBuilder);
            Discovery = subBuilder;
            break;
          }
          case 130: {
            global::Grafeas.V1.AttestationNote subBuilder = new global::Grafeas.V1.AttestationNote();
            if (typeCase_ == TypeOneofCase.Attestation) {
              subBuilder.MergeFrom(Attestation);
            }
            input.ReadMessage(subBuilder);
            Attestation = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to get an occurrence.
  /// </summary>
  public sealed partial class GetOccurrenceRequest : pb::IMessage<GetOccurrenceRequest> {
    private static readonly pb::MessageParser<GetOccurrenceRequest> _parser = new pb::MessageParser<GetOccurrenceRequest>(() => new GetOccurrenceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetOccurrenceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1.GrafeasReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOccurrenceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOccurrenceRequest(GetOccurrenceRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOccurrenceRequest Clone() {
      return new GetOccurrenceRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the occurrence in the form of
    /// `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetOccurrenceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetOccurrenceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetOccurrenceRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to list occurrences.
  /// </summary>
  public sealed partial class ListOccurrencesRequest : pb::IMessage<ListOccurrencesRequest> {
    private static readonly pb::MessageParser<ListOccurrencesRequest> _parser = new pb::MessageParser<ListOccurrencesRequest>(() => new ListOccurrencesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListOccurrencesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1.GrafeasReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOccurrencesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOccurrencesRequest(ListOccurrencesRequest other) : this() {
      parent_ = other.parent_;
      filter_ = other.filter_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOccurrencesRequest Clone() {
      return new ListOccurrencesRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// The name of the project to list occurrences for in the form of
    /// `projects/[PROJECT_ID]`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 2;
    private string filter_ = "";
    /// <summary>
    /// The filter expression.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filter {
      get { return filter_; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private int pageSize_;
    /// <summary>
    /// Number of occurrences to return in the list. Must be positive. Max allowed
    /// page size is 1000. If not specified, page size defaults to 20.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 4;
    private string pageToken_ = "";
    /// <summary>
    /// Token to provide to skip to a particular spot in the list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListOccurrencesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListOccurrencesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (Filter != other.Filter) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (Filter.Length != 0) hash ^= Filter.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (Filter.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Filter);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (Filter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListOccurrencesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.Filter.Length != 0) {
        Filter = other.Filter;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            Filter = input.ReadString();
            break;
          }
          case 24: {
            PageSize = input.ReadInt32();
            break;
          }
          case 34: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response for listing occurrences.
  /// </summary>
  public sealed partial class ListOccurrencesResponse : pb::IMessage<ListOccurrencesResponse> {
    private static readonly pb::MessageParser<ListOccurrencesResponse> _parser = new pb::MessageParser<ListOccurrencesResponse>(() => new ListOccurrencesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListOccurrencesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1.GrafeasReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOccurrencesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOccurrencesResponse(ListOccurrencesResponse other) : this() {
      occurrences_ = other.occurrences_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListOccurrencesResponse Clone() {
      return new ListOccurrencesResponse(this);
    }

    /// <summary>Field number for the "occurrences" field.</summary>
    public const int OccurrencesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Grafeas.V1.Occurrence> _repeated_occurrences_codec
        = pb::FieldCodec.ForMessage(10, global::Grafeas.V1.Occurrence.Parser);
    private readonly pbc::RepeatedField<global::Grafeas.V1.Occurrence> occurrences_ = new pbc::RepeatedField<global::Grafeas.V1.Occurrence>();
    /// <summary>
    /// The occurrences requested.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grafeas.V1.Occurrence> Occurrences {
      get { return occurrences_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// The next pagination token in the list response. It should be used as
    /// `page_token` for the following request. An empty value means no more
    /// results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListOccurrencesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListOccurrencesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!occurrences_.Equals(other.occurrences_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= occurrences_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      occurrences_.WriteTo(output, _repeated_occurrences_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += occurrences_.CalculateSize(_repeated_occurrences_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListOccurrencesResponse other) {
      if (other == null) {
        return;
      }
      occurrences_.Add(other.occurrences_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            occurrences_.AddEntriesFrom(input, _repeated_occurrences_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to delete a occurrence.
  /// </summary>
  public sealed partial class DeleteOccurrenceRequest : pb::IMessage<DeleteOccurrenceRequest> {
    private static readonly pb::MessageParser<DeleteOccurrenceRequest> _parser = new pb::MessageParser<DeleteOccurrenceRequest>(() => new DeleteOccurrenceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteOccurrenceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1.GrafeasReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteOccurrenceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteOccurrenceRequest(DeleteOccurrenceRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteOccurrenceRequest Clone() {
      return new DeleteOccurrenceRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the occurrence in the form of
    /// `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteOccurrenceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteOccurrenceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteOccurrenceRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to create a new occurrence.
  /// </summary>
  public sealed partial class CreateOccurrenceRequest : pb::IMessage<CreateOccurrenceRequest> {
    private static readonly pb::MessageParser<CreateOccurrenceRequest> _parser = new pb::MessageParser<CreateOccurrenceRequest>(() => new CreateOccurrenceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateOccurrenceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1.GrafeasReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateOccurrenceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateOccurrenceRequest(CreateOccurrenceRequest other) : this() {
      parent_ = other.parent_;
      occurrence_ = other.occurrence_ != null ? other.occurrence_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateOccurrenceRequest Clone() {
      return new CreateOccurrenceRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// The name of the project in the form of `projects/[PROJECT_ID]`, under which
    /// the occurrence is to be created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "occurrence" field.</summary>
    public const int OccurrenceFieldNumber = 2;
    private global::Grafeas.V1.Occurrence occurrence_;
    /// <summary>
    /// The occurrence to create.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1.Occurrence Occurrence {
      get { return occurrence_; }
      set {
        occurrence_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateOccurrenceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateOccurrenceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (!object.Equals(Occurrence, other.Occurrence)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (occurrence_ != null) hash ^= Occurrence.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (occurrence_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Occurrence);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (occurrence_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Occurrence);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateOccurrenceRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.occurrence_ != null) {
        if (occurrence_ == null) {
          Occurrence = new global::Grafeas.V1.Occurrence();
        }
        Occurrence.MergeFrom(other.Occurrence);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            if (occurrence_ == null) {
              Occurrence = new global::Grafeas.V1.Occurrence();
            }
            input.ReadMessage(Occurrence);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to update an occurrence.
  /// </summary>
  public sealed partial class UpdateOccurrenceRequest : pb::IMessage<UpdateOccurrenceRequest> {
    private static readonly pb::MessageParser<UpdateOccurrenceRequest> _parser = new pb::MessageParser<UpdateOccurrenceRequest>(() => new UpdateOccurrenceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateOccurrenceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1.GrafeasReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateOccurrenceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateOccurrenceRequest(UpdateOccurrenceRequest other) : this() {
      name_ = other.name_;
      occurrence_ = other.occurrence_ != null ? other.occurrence_.Clone() : null;
      updateMask_ = other.updateMask_ != null ? other.updateMask_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateOccurrenceRequest Clone() {
      return new UpdateOccurrenceRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the occurrence in the form of
    /// `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "occurrence" field.</summary>
    public const int OccurrenceFieldNumber = 2;
    private global::Grafeas.V1.Occurrence occurrence_;
    /// <summary>
    /// The updated occurrence.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1.Occurrence Occurrence {
      get { return occurrence_; }
      set {
        occurrence_ = value;
      }
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.FieldMask updateMask_;
    /// <summary>
    /// The fields to update.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateOccurrenceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateOccurrenceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Occurrence, other.Occurrence)) return false;
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (occurrence_ != null) hash ^= Occurrence.GetHashCode();
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (occurrence_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Occurrence);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UpdateMask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (occurrence_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Occurrence);
      }
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateOccurrenceRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.occurrence_ != null) {
        if (occurrence_ == null) {
          Occurrence = new global::Grafeas.V1.Occurrence();
        }
        Occurrence.MergeFrom(other.Occurrence);
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (occurrence_ == null) {
              Occurrence = new global::Grafeas.V1.Occurrence();
            }
            input.ReadMessage(Occurrence);
            break;
          }
          case 26: {
            if (updateMask_ == null) {
              UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(UpdateMask);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to get a note.
  /// </summary>
  public sealed partial class GetNoteRequest : pb::IMessage<GetNoteRequest> {
    private static readonly pb::MessageParser<GetNoteRequest> _parser = new pb::MessageParser<GetNoteRequest>(() => new GetNoteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetNoteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1.GrafeasReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNoteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNoteRequest(GetNoteRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNoteRequest Clone() {
      return new GetNoteRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the note in the form of
    /// `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetNoteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetNoteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetNoteRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to get the note to which the specified occurrence is attached.
  /// </summary>
  public sealed partial class GetOccurrenceNoteRequest : pb::IMessage<GetOccurrenceNoteRequest> {
    private static readonly pb::MessageParser<GetOccurrenceNoteRequest> _parser = new pb::MessageParser<GetOccurrenceNoteRequest>(() => new GetOccurrenceNoteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetOccurrenceNoteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1.GrafeasReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOccurrenceNoteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOccurrenceNoteRequest(GetOccurrenceNoteRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetOccurrenceNoteRequest Clone() {
      return new GetOccurrenceNoteRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the occurrence in the form of
    /// `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetOccurrenceNoteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetOccurrenceNoteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetOccurrenceNoteRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to list notes.
  /// </summary>
  public sealed partial class ListNotesRequest : pb::IMessage<ListNotesRequest> {
    private static readonly pb::MessageParser<ListNotesRequest> _parser = new pb::MessageParser<ListNotesRequest>(() => new ListNotesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListNotesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1.GrafeasReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNotesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNotesRequest(ListNotesRequest other) : this() {
      parent_ = other.parent_;
      filter_ = other.filter_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNotesRequest Clone() {
      return new ListNotesRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// The name of the project to list notes for in the form of
    /// `projects/[PROJECT_ID]`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 2;
    private string filter_ = "";
    /// <summary>
    /// The filter expression.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filter {
      get { return filter_; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private int pageSize_;
    /// <summary>
    /// Number of notes to return in the list. Must be positive. Max allowed page
    /// size is 1000. If not specified, page size defaults to 20.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 4;
    private string pageToken_ = "";
    /// <summary>
    /// Token to provide to skip to a particular spot in the list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListNotesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListNotesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (Filter != other.Filter) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (Filter.Length != 0) hash ^= Filter.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (Filter.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Filter);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (Filter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListNotesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.Filter.Length != 0) {
        Filter = other.Filter;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            Filter = input.ReadString();
            break;
          }
          case 24: {
            PageSize = input.ReadInt32();
            break;
          }
          case 34: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response for listing notes.
  /// </summary>
  public sealed partial class ListNotesResponse : pb::IMessage<ListNotesResponse> {
    private static readonly pb::MessageParser<ListNotesResponse> _parser = new pb::MessageParser<ListNotesResponse>(() => new ListNotesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListNotesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1.GrafeasReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNotesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNotesResponse(ListNotesResponse other) : this() {
      notes_ = other.notes_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNotesResponse Clone() {
      return new ListNotesResponse(this);
    }

    /// <summary>Field number for the "notes" field.</summary>
    public const int NotesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Grafeas.V1.Note> _repeated_notes_codec
        = pb::FieldCodec.ForMessage(10, global::Grafeas.V1.Note.Parser);
    private readonly pbc::RepeatedField<global::Grafeas.V1.Note> notes_ = new pbc::RepeatedField<global::Grafeas.V1.Note>();
    /// <summary>
    /// The notes requested.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grafeas.V1.Note> Notes {
      get { return notes_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// The next pagination token in the list response. It should be used as
    /// `page_token` for the following request. An empty value means no more
    /// results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListNotesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListNotesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!notes_.Equals(other.notes_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= notes_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      notes_.WriteTo(output, _repeated_notes_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += notes_.CalculateSize(_repeated_notes_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListNotesResponse other) {
      if (other == null) {
        return;
      }
      notes_.Add(other.notes_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            notes_.AddEntriesFrom(input, _repeated_notes_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to delete a note.
  /// </summary>
  public sealed partial class DeleteNoteRequest : pb::IMessage<DeleteNoteRequest> {
    private static readonly pb::MessageParser<DeleteNoteRequest> _parser = new pb::MessageParser<DeleteNoteRequest>(() => new DeleteNoteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteNoteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1.GrafeasReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNoteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNoteRequest(DeleteNoteRequest other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNoteRequest Clone() {
      return new DeleteNoteRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the note in the form of
    /// `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteNoteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteNoteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteNoteRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to create a new note.
  /// </summary>
  public sealed partial class CreateNoteRequest : pb::IMessage<CreateNoteRequest> {
    private static readonly pb::MessageParser<CreateNoteRequest> _parser = new pb::MessageParser<CreateNoteRequest>(() => new CreateNoteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateNoteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1.GrafeasReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateNoteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateNoteRequest(CreateNoteRequest other) : this() {
      parent_ = other.parent_;
      noteId_ = other.noteId_;
      note_ = other.note_ != null ? other.note_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateNoteRequest Clone() {
      return new CreateNoteRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// The name of the project in the form of `projects/[PROJECT_ID]`, under which
    /// the note is to be created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "note_id" field.</summary>
    public const int NoteIdFieldNumber = 2;
    private string noteId_ = "";
    /// <summary>
    /// The ID to use for this note.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NoteId {
      get { return noteId_; }
      set {
        noteId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "note" field.</summary>
    public const int NoteFieldNumber = 3;
    private global::Grafeas.V1.Note note_;
    /// <summary>
    /// The note to create.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1.Note Note {
      get { return note_; }
      set {
        note_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateNoteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateNoteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (NoteId != other.NoteId) return false;
      if (!object.Equals(Note, other.Note)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      if (NoteId.Length != 0) hash ^= NoteId.GetHashCode();
      if (note_ != null) hash ^= Note.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      if (NoteId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NoteId);
      }
      if (note_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Note);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      if (NoteId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NoteId);
      }
      if (note_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Note);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateNoteRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      if (other.NoteId.Length != 0) {
        NoteId = other.NoteId;
      }
      if (other.note_ != null) {
        if (note_ == null) {
          Note = new global::Grafeas.V1.Note();
        }
        Note.MergeFrom(other.Note);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            NoteId = input.ReadString();
            break;
          }
          case 26: {
            if (note_ == null) {
              Note = new global::Grafeas.V1.Note();
            }
            input.ReadMessage(Note);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to update a note.
  /// </summary>
  public sealed partial class UpdateNoteRequest : pb::IMessage<UpdateNoteRequest> {
    private static readonly pb::MessageParser<UpdateNoteRequest> _parser = new pb::MessageParser<UpdateNoteRequest>(() => new UpdateNoteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateNoteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1.GrafeasReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateNoteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateNoteRequest(UpdateNoteRequest other) : this() {
      name_ = other.name_;
      note_ = other.note_ != null ? other.note_.Clone() : null;
      updateMask_ = other.updateMask_ != null ? other.updateMask_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateNoteRequest Clone() {
      return new UpdateNoteRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the note in the form of
    /// `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "note" field.</summary>
    public const int NoteFieldNumber = 2;
    private global::Grafeas.V1.Note note_;
    /// <summary>
    /// The updated note.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Grafeas.V1.Note Note {
      get { return note_; }
      set {
        note_ = value;
      }
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.FieldMask updateMask_;
    /// <summary>
    /// The fields to update.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateNoteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateNoteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Note, other.Note)) return false;
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (note_ != null) hash ^= Note.GetHashCode();
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (note_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Note);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UpdateMask);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (note_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Note);
      }
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateNoteRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.note_ != null) {
        if (note_ == null) {
          Note = new global::Grafeas.V1.Note();
        }
        Note.MergeFrom(other.Note);
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (note_ == null) {
              Note = new global::Grafeas.V1.Note();
            }
            input.ReadMessage(Note);
            break;
          }
          case 26: {
            if (updateMask_ == null) {
              UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(UpdateMask);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to list occurrences for a note.
  /// </summary>
  public sealed partial class ListNoteOccurrencesRequest : pb::IMessage<ListNoteOccurrencesRequest> {
    private static readonly pb::MessageParser<ListNoteOccurrencesRequest> _parser = new pb::MessageParser<ListNoteOccurrencesRequest>(() => new ListNoteOccurrencesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListNoteOccurrencesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1.GrafeasReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNoteOccurrencesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNoteOccurrencesRequest(ListNoteOccurrencesRequest other) : this() {
      name_ = other.name_;
      filter_ = other.filter_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNoteOccurrencesRequest Clone() {
      return new ListNoteOccurrencesRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the note to list occurrences for in the form of
    /// `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 2;
    private string filter_ = "";
    /// <summary>
    /// The filter expression.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filter {
      get { return filter_; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private int pageSize_;
    /// <summary>
    /// Number of occurrences to return in the list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 4;
    private string pageToken_ = "";
    /// <summary>
    /// Token to provide to skip to a particular spot in the list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListNoteOccurrencesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListNoteOccurrencesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Filter != other.Filter) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Filter.Length != 0) hash ^= Filter.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Filter.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Filter);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Filter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListNoteOccurrencesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Filter.Length != 0) {
        Filter = other.Filter;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Filter = input.ReadString();
            break;
          }
          case 24: {
            PageSize = input.ReadInt32();
            break;
          }
          case 34: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response for listing occurrences for a note.
  /// </summary>
  public sealed partial class ListNoteOccurrencesResponse : pb::IMessage<ListNoteOccurrencesResponse> {
    private static readonly pb::MessageParser<ListNoteOccurrencesResponse> _parser = new pb::MessageParser<ListNoteOccurrencesResponse>(() => new ListNoteOccurrencesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListNoteOccurrencesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1.GrafeasReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNoteOccurrencesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNoteOccurrencesResponse(ListNoteOccurrencesResponse other) : this() {
      occurrences_ = other.occurrences_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNoteOccurrencesResponse Clone() {
      return new ListNoteOccurrencesResponse(this);
    }

    /// <summary>Field number for the "occurrences" field.</summary>
    public const int OccurrencesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Grafeas.V1.Occurrence> _repeated_occurrences_codec
        = pb::FieldCodec.ForMessage(10, global::Grafeas.V1.Occurrence.Parser);
    private readonly pbc::RepeatedField<global::Grafeas.V1.Occurrence> occurrences_ = new pbc::RepeatedField<global::Grafeas.V1.Occurrence>();
    /// <summary>
    /// The occurrences attached to the specified note.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grafeas.V1.Occurrence> Occurrences {
      get { return occurrences_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// Token to provide to skip to a particular spot in the list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListNoteOccurrencesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListNoteOccurrencesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!occurrences_.Equals(other.occurrences_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= occurrences_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      occurrences_.WriteTo(output, _repeated_occurrences_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += occurrences_.CalculateSize(_repeated_occurrences_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListNoteOccurrencesResponse other) {
      if (other == null) {
        return;
      }
      occurrences_.Add(other.occurrences_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            occurrences_.AddEntriesFrom(input, _repeated_occurrences_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to create notes in batch.
  /// </summary>
  public sealed partial class BatchCreateNotesRequest : pb::IMessage<BatchCreateNotesRequest> {
    private static readonly pb::MessageParser<BatchCreateNotesRequest> _parser = new pb::MessageParser<BatchCreateNotesRequest>(() => new BatchCreateNotesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchCreateNotesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1.GrafeasReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchCreateNotesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchCreateNotesRequest(BatchCreateNotesRequest other) : this() {
      parent_ = other.parent_;
      notes_ = other.notes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchCreateNotesRequest Clone() {
      return new BatchCreateNotesRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// The name of the project in the form of `projects/[PROJECT_ID]`, under which
    /// the notes are to be created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "notes" field.</summary>
    public const int NotesFieldNumber = 2;
    private static readonly pbc::MapField<string, global::Grafeas.V1.Note>.Codec _map_notes_codec
        = new pbc::MapField<string, global::Grafeas.V1.Note>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Grafeas.V1.Note.Parser), 18);
    private readonly pbc::MapField<string, global::Grafeas.V1.Note> notes_ = new pbc::MapField<string, global::Grafeas.V1.Note>();
    /// <summary>
    /// The notes to create. Max allowed length is 1000.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Grafeas.V1.Note> Notes {
      get { return notes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchCreateNotesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchCreateNotesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if (!Notes.Equals(other.Notes)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      hash ^= Notes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      notes_.WriteTo(output, _map_notes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      size += notes_.CalculateSize(_map_notes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchCreateNotesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      notes_.Add(other.notes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            notes_.AddEntriesFrom(input, _map_notes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response for creating notes in batch.
  /// </summary>
  public sealed partial class BatchCreateNotesResponse : pb::IMessage<BatchCreateNotesResponse> {
    private static readonly pb::MessageParser<BatchCreateNotesResponse> _parser = new pb::MessageParser<BatchCreateNotesResponse>(() => new BatchCreateNotesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchCreateNotesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1.GrafeasReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchCreateNotesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchCreateNotesResponse(BatchCreateNotesResponse other) : this() {
      notes_ = other.notes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchCreateNotesResponse Clone() {
      return new BatchCreateNotesResponse(this);
    }

    /// <summary>Field number for the "notes" field.</summary>
    public const int NotesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Grafeas.V1.Note> _repeated_notes_codec
        = pb::FieldCodec.ForMessage(10, global::Grafeas.V1.Note.Parser);
    private readonly pbc::RepeatedField<global::Grafeas.V1.Note> notes_ = new pbc::RepeatedField<global::Grafeas.V1.Note>();
    /// <summary>
    /// The notes that were created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grafeas.V1.Note> Notes {
      get { return notes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchCreateNotesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchCreateNotesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!notes_.Equals(other.notes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= notes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      notes_.WriteTo(output, _repeated_notes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += notes_.CalculateSize(_repeated_notes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchCreateNotesResponse other) {
      if (other == null) {
        return;
      }
      notes_.Add(other.notes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            notes_.AddEntriesFrom(input, _repeated_notes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request to create occurrences in batch.
  /// </summary>
  public sealed partial class BatchCreateOccurrencesRequest : pb::IMessage<BatchCreateOccurrencesRequest> {
    private static readonly pb::MessageParser<BatchCreateOccurrencesRequest> _parser = new pb::MessageParser<BatchCreateOccurrencesRequest>(() => new BatchCreateOccurrencesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchCreateOccurrencesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1.GrafeasReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchCreateOccurrencesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchCreateOccurrencesRequest(BatchCreateOccurrencesRequest other) : this() {
      parent_ = other.parent_;
      occurrences_ = other.occurrences_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchCreateOccurrencesRequest Clone() {
      return new BatchCreateOccurrencesRequest(this);
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 1;
    private string parent_ = "";
    /// <summary>
    /// The name of the project in the form of `projects/[PROJECT_ID]`, under which
    /// the occurrences are to be created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parent {
      get { return parent_; }
      set {
        parent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "occurrences" field.</summary>
    public const int OccurrencesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Grafeas.V1.Occurrence> _repeated_occurrences_codec
        = pb::FieldCodec.ForMessage(18, global::Grafeas.V1.Occurrence.Parser);
    private readonly pbc::RepeatedField<global::Grafeas.V1.Occurrence> occurrences_ = new pbc::RepeatedField<global::Grafeas.V1.Occurrence>();
    /// <summary>
    /// The occurrences to create. Max allowed length is 1000.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grafeas.V1.Occurrence> Occurrences {
      get { return occurrences_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchCreateOccurrencesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchCreateOccurrencesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Parent != other.Parent) return false;
      if(!occurrences_.Equals(other.occurrences_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Parent.Length != 0) hash ^= Parent.GetHashCode();
      hash ^= occurrences_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Parent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Parent);
      }
      occurrences_.WriteTo(output, _repeated_occurrences_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Parent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parent);
      }
      size += occurrences_.CalculateSize(_repeated_occurrences_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchCreateOccurrencesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Parent.Length != 0) {
        Parent = other.Parent;
      }
      occurrences_.Add(other.occurrences_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Parent = input.ReadString();
            break;
          }
          case 18: {
            occurrences_.AddEntriesFrom(input, _repeated_occurrences_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response for creating occurrences in batch.
  /// </summary>
  public sealed partial class BatchCreateOccurrencesResponse : pb::IMessage<BatchCreateOccurrencesResponse> {
    private static readonly pb::MessageParser<BatchCreateOccurrencesResponse> _parser = new pb::MessageParser<BatchCreateOccurrencesResponse>(() => new BatchCreateOccurrencesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchCreateOccurrencesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Grafeas.V1.GrafeasReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchCreateOccurrencesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchCreateOccurrencesResponse(BatchCreateOccurrencesResponse other) : this() {
      occurrences_ = other.occurrences_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchCreateOccurrencesResponse Clone() {
      return new BatchCreateOccurrencesResponse(this);
    }

    /// <summary>Field number for the "occurrences" field.</summary>
    public const int OccurrencesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Grafeas.V1.Occurrence> _repeated_occurrences_codec
        = pb::FieldCodec.ForMessage(10, global::Grafeas.V1.Occurrence.Parser);
    private readonly pbc::RepeatedField<global::Grafeas.V1.Occurrence> occurrences_ = new pbc::RepeatedField<global::Grafeas.V1.Occurrence>();
    /// <summary>
    /// The occurrences that were created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Grafeas.V1.Occurrence> Occurrences {
      get { return occurrences_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchCreateOccurrencesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchCreateOccurrencesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!occurrences_.Equals(other.occurrences_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= occurrences_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      occurrences_.WriteTo(output, _repeated_occurrences_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += occurrences_.CalculateSize(_repeated_occurrences_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchCreateOccurrencesResponse other) {
      if (other == null) {
        return;
      }
      occurrences_.Add(other.occurrences_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            occurrences_.AddEntriesFrom(input, _repeated_occurrences_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
