// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/bigtable/admin/v2/table.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Bigtable.Admin.V2 {

  /// <summary>Holder for reflection information generated from google/bigtable/admin/v2/table.proto</summary>
  public static partial class TableReflection {

    #region Descriptor
    /// <summary>File descriptor for google/bigtable/admin/v2/table.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TableReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRnb29nbGUvYmlndGFibGUvYWRtaW4vdjIvdGFibGUucHJvdG8SGGdvb2ds",
            "ZS5iaWd0YWJsZS5hZG1pbi52MhocZ29vZ2xlL2FwaS9hbm5vdGF0aW9ucy5w",
            "cm90bxoeZ29vZ2xlL3Byb3RvYnVmL2R1cmF0aW9uLnByb3RvGh9nb29nbGUv",
            "cHJvdG9idWYvdGltZXN0YW1wLnByb3RvIssGCgVUYWJsZRIMCgRuYW1lGAEg",
            "ASgJEkoKDmNsdXN0ZXJfc3RhdGVzGAIgAygLMjIuZ29vZ2xlLmJpZ3RhYmxl",
            "LmFkbWluLnYyLlRhYmxlLkNsdXN0ZXJTdGF0ZXNFbnRyeRJMCg9jb2x1bW5f",
            "ZmFtaWxpZXMYAyADKAsyMy5nb29nbGUuYmlndGFibGUuYWRtaW4udjIuVGFi",
            "bGUuQ29sdW1uRmFtaWxpZXNFbnRyeRJJCgtncmFudWxhcml0eRgEIAEoDjI0",
            "Lmdvb2dsZS5iaWd0YWJsZS5hZG1pbi52Mi5UYWJsZS5UaW1lc3RhbXBHcmFu",
            "dWxhcml0eRriAQoMQ2x1c3RlclN0YXRlElgKEXJlcGxpY2F0aW9uX3N0YXRl",
            "GAEgASgOMj0uZ29vZ2xlLmJpZ3RhYmxlLmFkbWluLnYyLlRhYmxlLkNsdXN0",
            "ZXJTdGF0ZS5SZXBsaWNhdGlvblN0YXRlIngKEFJlcGxpY2F0aW9uU3RhdGUS",
            "EwoPU1RBVEVfTk9UX0tOT1dOEAASEAoMSU5JVElBTElaSU5HEAESFwoTUExB",
            "Tk5FRF9NQUlOVEVOQU5DRRACEhkKFVVOUExBTk5FRF9NQUlOVEVOQU5DRRAD",
            "EgkKBVJFQURZEAQaYgoSQ2x1c3RlclN0YXRlc0VudHJ5EgsKA2tleRgBIAEo",
            "CRI7CgV2YWx1ZRgCIAEoCzIsLmdvb2dsZS5iaWd0YWJsZS5hZG1pbi52Mi5U",
            "YWJsZS5DbHVzdGVyU3RhdGU6AjgBGl0KE0NvbHVtbkZhbWlsaWVzRW50cnkS",
            "CwoDa2V5GAEgASgJEjUKBXZhbHVlGAIgASgLMiYuZ29vZ2xlLmJpZ3RhYmxl",
            "LmFkbWluLnYyLkNvbHVtbkZhbWlseToCOAEiSQoUVGltZXN0YW1wR3JhbnVs",
            "YXJpdHkSJQohVElNRVNUQU1QX0dSQU5VTEFSSVRZX1VOU1BFQ0lGSUVEEAAS",
            "CgoGTUlMTElTEAEiXAoEVmlldxIUChBWSUVXX1VOU1BFQ0lGSUVEEAASDQoJ",
            "TkFNRV9PTkxZEAESDwoLU0NIRU1BX1ZJRVcQAhIUChBSRVBMSUNBVElPTl9W",
            "SUVXEAMSCAoERlVMTBAEIkEKDENvbHVtbkZhbWlseRIxCgdnY19ydWxlGAEg",
            "ASgLMiAuZ29vZ2xlLmJpZ3RhYmxlLmFkbWluLnYyLkdjUnVsZSLVAgoGR2NS",
            "dWxlEhoKEG1heF9udW1fdmVyc2lvbnMYASABKAVIABIsCgdtYXhfYWdlGAIg",
            "ASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uSAASRQoMaW50ZXJzZWN0",
            "aW9uGAMgASgLMi0uZ29vZ2xlLmJpZ3RhYmxlLmFkbWluLnYyLkdjUnVsZS5J",
            "bnRlcnNlY3Rpb25IABI3CgV1bmlvbhgEIAEoCzImLmdvb2dsZS5iaWd0YWJs",
            "ZS5hZG1pbi52Mi5HY1J1bGUuVW5pb25IABo/CgxJbnRlcnNlY3Rpb24SLwoF",
            "cnVsZXMYASADKAsyIC5nb29nbGUuYmlndGFibGUuYWRtaW4udjIuR2NSdWxl",
            "GjgKBVVuaW9uEi8KBXJ1bGVzGAEgAygLMiAuZ29vZ2xlLmJpZ3RhYmxlLmFk",
            "bWluLnYyLkdjUnVsZUIGCgRydWxlIs8CCghTbmFwc2hvdBIMCgRuYW1lGAEg",
            "ASgJEjUKDHNvdXJjZV90YWJsZRgCIAEoCzIfLmdvb2dsZS5iaWd0YWJsZS5h",
            "ZG1pbi52Mi5UYWJsZRIXCg9kYXRhX3NpemVfYnl0ZXMYAyABKAMSLwoLY3Jl",
            "YXRlX3RpbWUYBCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEi8K",
            "C2RlbGV0ZV90aW1lGAUgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFt",
            "cBI3CgVzdGF0ZRgGIAEoDjIoLmdvb2dsZS5iaWd0YWJsZS5hZG1pbi52Mi5T",
            "bmFwc2hvdC5TdGF0ZRITCgtkZXNjcmlwdGlvbhgHIAEoCSI1CgVTdGF0ZRIT",
            "Cg9TVEFURV9OT1RfS05PV04QABIJCgVSRUFEWRABEgwKCENSRUFUSU5HEAJC",
            "rQEKHGNvbS5nb29nbGUuYmlndGFibGUuYWRtaW4udjJCClRhYmxlUHJvdG9Q",
            "AVo9Z29vZ2xlLmdvbGFuZy5vcmcvZ2VucHJvdG8vZ29vZ2xlYXBpcy9iaWd0",
            "YWJsZS9hZG1pbi92MjthZG1pbqoCHkdvb2dsZS5DbG91ZC5CaWd0YWJsZS5B",
            "ZG1pbi5WMsoCHkdvb2dsZVxDbG91ZFxCaWd0YWJsZVxBZG1pblxWMmIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigtable.Admin.V2.Table), global::Google.Cloud.Bigtable.Admin.V2.Table.Parser, new[]{ "Name", "ClusterStates", "ColumnFamilies", "Granularity" }, null, new[]{ typeof(global::Google.Cloud.Bigtable.Admin.V2.Table.Types.TimestampGranularity), typeof(global::Google.Cloud.Bigtable.Admin.V2.Table.Types.View) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigtable.Admin.V2.Table.Types.ClusterState), global::Google.Cloud.Bigtable.Admin.V2.Table.Types.ClusterState.Parser, new[]{ "ReplicationState" }, null, new[]{ typeof(global::Google.Cloud.Bigtable.Admin.V2.Table.Types.ClusterState.Types.ReplicationState) }, null),
            null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigtable.Admin.V2.ColumnFamily), global::Google.Cloud.Bigtable.Admin.V2.ColumnFamily.Parser, new[]{ "GcRule" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigtable.Admin.V2.GcRule), global::Google.Cloud.Bigtable.Admin.V2.GcRule.Parser, new[]{ "MaxNumVersions", "MaxAge", "Intersection", "Union" }, new[]{ "Rule" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigtable.Admin.V2.GcRule.Types.Intersection), global::Google.Cloud.Bigtable.Admin.V2.GcRule.Types.Intersection.Parser, new[]{ "Rules" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigtable.Admin.V2.GcRule.Types.Union), global::Google.Cloud.Bigtable.Admin.V2.GcRule.Types.Union.Parser, new[]{ "Rules" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Bigtable.Admin.V2.Snapshot), global::Google.Cloud.Bigtable.Admin.V2.Snapshot.Parser, new[]{ "Name", "SourceTable", "DataSizeBytes", "CreateTime", "DeleteTime", "State", "Description" }, null, new[]{ typeof(global::Google.Cloud.Bigtable.Admin.V2.Snapshot.Types.State) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A collection of user data indexed by row, column, and timestamp.
  /// Each table is served using the resources of its parent cluster.
  /// </summary>
  public sealed partial class Table : pb::IMessage<Table> {
    private static readonly pb::MessageParser<Table> _parser = new pb::MessageParser<Table>(() => new Table());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Table> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Bigtable.Admin.V2.TableReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Table() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Table(Table other) : this() {
      name_ = other.name_;
      clusterStates_ = other.clusterStates_.Clone();
      columnFamilies_ = other.columnFamilies_.Clone();
      granularity_ = other.granularity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Table Clone() {
      return new Table(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// (`OutputOnly`)
    /// The unique name of the table. Values are of the form
    /// `projects/&lt;project>/instances/&lt;instance>/tables/[_a-zA-Z0-9][-_.a-zA-Z0-9]*`.
    /// Views: `NAME_ONLY`, `SCHEMA_VIEW`, `REPLICATION_VIEW`, `FULL`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cluster_states" field.</summary>
    public const int ClusterStatesFieldNumber = 2;
    private static readonly pbc::MapField<string, global::Google.Cloud.Bigtable.Admin.V2.Table.Types.ClusterState>.Codec _map_clusterStates_codec
        = new pbc::MapField<string, global::Google.Cloud.Bigtable.Admin.V2.Table.Types.ClusterState>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Cloud.Bigtable.Admin.V2.Table.Types.ClusterState.Parser), 18);
    private readonly pbc::MapField<string, global::Google.Cloud.Bigtable.Admin.V2.Table.Types.ClusterState> clusterStates_ = new pbc::MapField<string, global::Google.Cloud.Bigtable.Admin.V2.Table.Types.ClusterState>();
    /// <summary>
    /// (`OutputOnly`)
    /// Map from cluster ID to per-cluster table state.
    /// If it could not be determined whether or not the table has data in a
    /// particular cluster (for example, if its zone is unavailable), then
    /// there will be an entry for the cluster with UNKNOWN `replication_status`.
    /// Views: `REPLICATION_VIEW`, `FULL`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Cloud.Bigtable.Admin.V2.Table.Types.ClusterState> ClusterStates {
      get { return clusterStates_; }
    }

    /// <summary>Field number for the "column_families" field.</summary>
    public const int ColumnFamiliesFieldNumber = 3;
    private static readonly pbc::MapField<string, global::Google.Cloud.Bigtable.Admin.V2.ColumnFamily>.Codec _map_columnFamilies_codec
        = new pbc::MapField<string, global::Google.Cloud.Bigtable.Admin.V2.ColumnFamily>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Cloud.Bigtable.Admin.V2.ColumnFamily.Parser), 26);
    private readonly pbc::MapField<string, global::Google.Cloud.Bigtable.Admin.V2.ColumnFamily> columnFamilies_ = new pbc::MapField<string, global::Google.Cloud.Bigtable.Admin.V2.ColumnFamily>();
    /// <summary>
    /// (`CreationOnly`)
    /// The column families configured for this table, mapped by column family ID.
    /// Views: `SCHEMA_VIEW`, `FULL`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Cloud.Bigtable.Admin.V2.ColumnFamily> ColumnFamilies {
      get { return columnFamilies_; }
    }

    /// <summary>Field number for the "granularity" field.</summary>
    public const int GranularityFieldNumber = 4;
    private global::Google.Cloud.Bigtable.Admin.V2.Table.Types.TimestampGranularity granularity_ = 0;
    /// <summary>
    /// (`CreationOnly`)
    /// The granularity (i.e. `MILLIS`) at which timestamps are stored in
    /// this table. Timestamps not matching the granularity will be rejected.
    /// If unspecified at creation time, the value will be set to `MILLIS`.
    /// Views: `SCHEMA_VIEW`, `FULL`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Bigtable.Admin.V2.Table.Types.TimestampGranularity Granularity {
      get { return granularity_; }
      set {
        granularity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Table);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Table other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!ClusterStates.Equals(other.ClusterStates)) return false;
      if (!ColumnFamilies.Equals(other.ColumnFamilies)) return false;
      if (Granularity != other.Granularity) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= ClusterStates.GetHashCode();
      hash ^= ColumnFamilies.GetHashCode();
      if (Granularity != 0) hash ^= Granularity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      clusterStates_.WriteTo(output, _map_clusterStates_codec);
      columnFamilies_.WriteTo(output, _map_columnFamilies_codec);
      if (Granularity != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Granularity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += clusterStates_.CalculateSize(_map_clusterStates_codec);
      size += columnFamilies_.CalculateSize(_map_columnFamilies_codec);
      if (Granularity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Granularity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Table other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      clusterStates_.Add(other.clusterStates_);
      columnFamilies_.Add(other.columnFamilies_);
      if (other.Granularity != 0) {
        Granularity = other.Granularity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            clusterStates_.AddEntriesFrom(input, _map_clusterStates_codec);
            break;
          }
          case 26: {
            columnFamilies_.AddEntriesFrom(input, _map_columnFamilies_codec);
            break;
          }
          case 32: {
            Granularity = (global::Google.Cloud.Bigtable.Admin.V2.Table.Types.TimestampGranularity) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Table message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Possible timestamp granularities to use when keeping multiple versions
      /// of data in a table.
      /// </summary>
      public enum TimestampGranularity {
        /// <summary>
        /// The user did not specify a granularity. Should not be returned.
        /// When specified during table creation, MILLIS will be used.
        /// </summary>
        [pbr::OriginalName("TIMESTAMP_GRANULARITY_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// The table keeps data versioned at a granularity of 1ms.
        /// </summary>
        [pbr::OriginalName("MILLIS")] Millis = 1,
      }

      /// <summary>
      /// Defines a view over a table's fields.
      /// </summary>
      public enum View {
        /// <summary>
        /// Uses the default view for each method as documented in its request.
        /// </summary>
        [pbr::OriginalName("VIEW_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Only populates `name`.
        /// </summary>
        [pbr::OriginalName("NAME_ONLY")] NameOnly = 1,
        /// <summary>
        /// Only populates `name` and fields related to the table's schema.
        /// </summary>
        [pbr::OriginalName("SCHEMA_VIEW")] SchemaView = 2,
        /// <summary>
        /// Only populates `name` and fields related to the table's
        /// replication state.
        /// </summary>
        [pbr::OriginalName("REPLICATION_VIEW")] ReplicationView = 3,
        /// <summary>
        /// Populates all fields.
        /// </summary>
        [pbr::OriginalName("FULL")] Full = 4,
      }

      /// <summary>
      /// The state of a table's data in a particular cluster.
      /// </summary>
      public sealed partial class ClusterState : pb::IMessage<ClusterState> {
        private static readonly pb::MessageParser<ClusterState> _parser = new pb::MessageParser<ClusterState>(() => new ClusterState());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClusterState> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Bigtable.Admin.V2.Table.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClusterState() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClusterState(ClusterState other) : this() {
          replicationState_ = other.replicationState_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClusterState Clone() {
          return new ClusterState(this);
        }

        /// <summary>Field number for the "replication_state" field.</summary>
        public const int ReplicationStateFieldNumber = 1;
        private global::Google.Cloud.Bigtable.Admin.V2.Table.Types.ClusterState.Types.ReplicationState replicationState_ = 0;
        /// <summary>
        /// (`OutputOnly`)
        /// The state of replication for the table in this cluster.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Cloud.Bigtable.Admin.V2.Table.Types.ClusterState.Types.ReplicationState ReplicationState {
          get { return replicationState_; }
          set {
            replicationState_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClusterState);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClusterState other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ReplicationState != other.ReplicationState) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ReplicationState != 0) hash ^= ReplicationState.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ReplicationState != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) ReplicationState);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ReplicationState != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReplicationState);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClusterState other) {
          if (other == null) {
            return;
          }
          if (other.ReplicationState != 0) {
            ReplicationState = other.ReplicationState;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ReplicationState = (global::Google.Cloud.Bigtable.Admin.V2.Table.Types.ClusterState.Types.ReplicationState) input.ReadEnum();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ClusterState message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Table replication states.
          /// </summary>
          public enum ReplicationState {
            /// <summary>
            /// The replication state of the table is unknown in this cluster.
            /// </summary>
            [pbr::OriginalName("STATE_NOT_KNOWN")] StateNotKnown = 0,
            /// <summary>
            /// The cluster was recently created, and the table must finish copying
            /// over pre-existing data from other clusters before it can begin
            /// receiving live replication updates and serving Data API requests.
            /// </summary>
            [pbr::OriginalName("INITIALIZING")] Initializing = 1,
            /// <summary>
            /// The table is temporarily unable to serve Data API requests from this
            /// cluster due to planned internal maintenance.
            /// </summary>
            [pbr::OriginalName("PLANNED_MAINTENANCE")] PlannedMaintenance = 2,
            /// <summary>
            /// The table is temporarily unable to serve Data API requests from this
            /// cluster due to unplanned or emergency maintenance.
            /// </summary>
            [pbr::OriginalName("UNPLANNED_MAINTENANCE")] UnplannedMaintenance = 3,
            /// <summary>
            /// The table can serve Data API requests from this cluster. Depending on
            /// replication delay, reads may not immediately reflect the state of the
            /// table in other clusters.
            /// </summary>
            [pbr::OriginalName("READY")] Ready = 4,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  /// <summary>
  /// A set of columns within a table which share a common configuration.
  /// </summary>
  public sealed partial class ColumnFamily : pb::IMessage<ColumnFamily> {
    private static readonly pb::MessageParser<ColumnFamily> _parser = new pb::MessageParser<ColumnFamily>(() => new ColumnFamily());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColumnFamily> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Bigtable.Admin.V2.TableReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnFamily() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnFamily(ColumnFamily other) : this() {
      gcRule_ = other.gcRule_ != null ? other.gcRule_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnFamily Clone() {
      return new ColumnFamily(this);
    }

    /// <summary>Field number for the "gc_rule" field.</summary>
    public const int GcRuleFieldNumber = 1;
    private global::Google.Cloud.Bigtable.Admin.V2.GcRule gcRule_;
    /// <summary>
    /// Garbage collection rule specified as a protobuf.
    /// Must serialize to at most 500 bytes.
    ///
    /// NOTE: Garbage collection executes opportunistically in the background, and
    /// so it's possible for reads to return a cell even if it matches the active
    /// GC expression for its family.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Bigtable.Admin.V2.GcRule GcRule {
      get { return gcRule_; }
      set {
        gcRule_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColumnFamily);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColumnFamily other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GcRule, other.GcRule)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gcRule_ != null) hash ^= GcRule.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (gcRule_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GcRule);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gcRule_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GcRule);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColumnFamily other) {
      if (other == null) {
        return;
      }
      if (other.gcRule_ != null) {
        if (gcRule_ == null) {
          GcRule = new global::Google.Cloud.Bigtable.Admin.V2.GcRule();
        }
        GcRule.MergeFrom(other.GcRule);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gcRule_ == null) {
              GcRule = new global::Google.Cloud.Bigtable.Admin.V2.GcRule();
            }
            input.ReadMessage(GcRule);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Rule for determining which cells to delete during garbage collection.
  /// </summary>
  public sealed partial class GcRule : pb::IMessage<GcRule> {
    private static readonly pb::MessageParser<GcRule> _parser = new pb::MessageParser<GcRule>(() => new GcRule());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GcRule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Bigtable.Admin.V2.TableReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GcRule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GcRule(GcRule other) : this() {
      switch (other.RuleCase) {
        case RuleOneofCase.MaxNumVersions:
          MaxNumVersions = other.MaxNumVersions;
          break;
        case RuleOneofCase.MaxAge:
          MaxAge = other.MaxAge.Clone();
          break;
        case RuleOneofCase.Intersection:
          Intersection = other.Intersection.Clone();
          break;
        case RuleOneofCase.Union:
          Union = other.Union.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GcRule Clone() {
      return new GcRule(this);
    }

    /// <summary>Field number for the "max_num_versions" field.</summary>
    public const int MaxNumVersionsFieldNumber = 1;
    /// <summary>
    /// Delete all cells in a column except the most recent N.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxNumVersions {
      get { return ruleCase_ == RuleOneofCase.MaxNumVersions ? (int) rule_ : 0; }
      set {
        rule_ = value;
        ruleCase_ = RuleOneofCase.MaxNumVersions;
      }
    }

    /// <summary>Field number for the "max_age" field.</summary>
    public const int MaxAgeFieldNumber = 2;
    /// <summary>
    /// Delete cells in a column older than the given age.
    /// Values must be at least one millisecond, and will be truncated to
    /// microsecond granularity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration MaxAge {
      get { return ruleCase_ == RuleOneofCase.MaxAge ? (global::Google.Protobuf.WellKnownTypes.Duration) rule_ : null; }
      set {
        rule_ = value;
        ruleCase_ = value == null ? RuleOneofCase.None : RuleOneofCase.MaxAge;
      }
    }

    /// <summary>Field number for the "intersection" field.</summary>
    public const int IntersectionFieldNumber = 3;
    /// <summary>
    /// Delete cells that would be deleted by every nested rule.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Bigtable.Admin.V2.GcRule.Types.Intersection Intersection {
      get { return ruleCase_ == RuleOneofCase.Intersection ? (global::Google.Cloud.Bigtable.Admin.V2.GcRule.Types.Intersection) rule_ : null; }
      set {
        rule_ = value;
        ruleCase_ = value == null ? RuleOneofCase.None : RuleOneofCase.Intersection;
      }
    }

    /// <summary>Field number for the "union" field.</summary>
    public const int UnionFieldNumber = 4;
    /// <summary>
    /// Delete cells that would be deleted by any nested rule.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Bigtable.Admin.V2.GcRule.Types.Union Union {
      get { return ruleCase_ == RuleOneofCase.Union ? (global::Google.Cloud.Bigtable.Admin.V2.GcRule.Types.Union) rule_ : null; }
      set {
        rule_ = value;
        ruleCase_ = value == null ? RuleOneofCase.None : RuleOneofCase.Union;
      }
    }

    private object rule_;
    /// <summary>Enum of possible cases for the "rule" oneof.</summary>
    public enum RuleOneofCase {
      None = 0,
      MaxNumVersions = 1,
      MaxAge = 2,
      Intersection = 3,
      Union = 4,
    }
    private RuleOneofCase ruleCase_ = RuleOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RuleOneofCase RuleCase {
      get { return ruleCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRule() {
      ruleCase_ = RuleOneofCase.None;
      rule_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GcRule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GcRule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxNumVersions != other.MaxNumVersions) return false;
      if (!object.Equals(MaxAge, other.MaxAge)) return false;
      if (!object.Equals(Intersection, other.Intersection)) return false;
      if (!object.Equals(Union, other.Union)) return false;
      if (RuleCase != other.RuleCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ruleCase_ == RuleOneofCase.MaxNumVersions) hash ^= MaxNumVersions.GetHashCode();
      if (ruleCase_ == RuleOneofCase.MaxAge) hash ^= MaxAge.GetHashCode();
      if (ruleCase_ == RuleOneofCase.Intersection) hash ^= Intersection.GetHashCode();
      if (ruleCase_ == RuleOneofCase.Union) hash ^= Union.GetHashCode();
      hash ^= (int) ruleCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ruleCase_ == RuleOneofCase.MaxNumVersions) {
        output.WriteRawTag(8);
        output.WriteInt32(MaxNumVersions);
      }
      if (ruleCase_ == RuleOneofCase.MaxAge) {
        output.WriteRawTag(18);
        output.WriteMessage(MaxAge);
      }
      if (ruleCase_ == RuleOneofCase.Intersection) {
        output.WriteRawTag(26);
        output.WriteMessage(Intersection);
      }
      if (ruleCase_ == RuleOneofCase.Union) {
        output.WriteRawTag(34);
        output.WriteMessage(Union);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ruleCase_ == RuleOneofCase.MaxNumVersions) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxNumVersions);
      }
      if (ruleCase_ == RuleOneofCase.MaxAge) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxAge);
      }
      if (ruleCase_ == RuleOneofCase.Intersection) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Intersection);
      }
      if (ruleCase_ == RuleOneofCase.Union) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Union);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GcRule other) {
      if (other == null) {
        return;
      }
      switch (other.RuleCase) {
        case RuleOneofCase.MaxNumVersions:
          MaxNumVersions = other.MaxNumVersions;
          break;
        case RuleOneofCase.MaxAge:
          if (MaxAge == null) {
            MaxAge = new global::Google.Protobuf.WellKnownTypes.Duration();
          }
          MaxAge.MergeFrom(other.MaxAge);
          break;
        case RuleOneofCase.Intersection:
          if (Intersection == null) {
            Intersection = new global::Google.Cloud.Bigtable.Admin.V2.GcRule.Types.Intersection();
          }
          Intersection.MergeFrom(other.Intersection);
          break;
        case RuleOneofCase.Union:
          if (Union == null) {
            Union = new global::Google.Cloud.Bigtable.Admin.V2.GcRule.Types.Union();
          }
          Union.MergeFrom(other.Union);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MaxNumVersions = input.ReadInt32();
            break;
          }
          case 18: {
            global::Google.Protobuf.WellKnownTypes.Duration subBuilder = new global::Google.Protobuf.WellKnownTypes.Duration();
            if (ruleCase_ == RuleOneofCase.MaxAge) {
              subBuilder.MergeFrom(MaxAge);
            }
            input.ReadMessage(subBuilder);
            MaxAge = subBuilder;
            break;
          }
          case 26: {
            global::Google.Cloud.Bigtable.Admin.V2.GcRule.Types.Intersection subBuilder = new global::Google.Cloud.Bigtable.Admin.V2.GcRule.Types.Intersection();
            if (ruleCase_ == RuleOneofCase.Intersection) {
              subBuilder.MergeFrom(Intersection);
            }
            input.ReadMessage(subBuilder);
            Intersection = subBuilder;
            break;
          }
          case 34: {
            global::Google.Cloud.Bigtable.Admin.V2.GcRule.Types.Union subBuilder = new global::Google.Cloud.Bigtable.Admin.V2.GcRule.Types.Union();
            if (ruleCase_ == RuleOneofCase.Union) {
              subBuilder.MergeFrom(Union);
            }
            input.ReadMessage(subBuilder);
            Union = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GcRule message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// A GcRule which deletes cells matching all of the given rules.
      /// </summary>
      public sealed partial class Intersection : pb::IMessage<Intersection> {
        private static readonly pb::MessageParser<Intersection> _parser = new pb::MessageParser<Intersection>(() => new Intersection());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Intersection> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Bigtable.Admin.V2.GcRule.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Intersection() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Intersection(Intersection other) : this() {
          rules_ = other.rules_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Intersection Clone() {
          return new Intersection(this);
        }

        /// <summary>Field number for the "rules" field.</summary>
        public const int RulesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Google.Cloud.Bigtable.Admin.V2.GcRule> _repeated_rules_codec
            = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Bigtable.Admin.V2.GcRule.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Bigtable.Admin.V2.GcRule> rules_ = new pbc::RepeatedField<global::Google.Cloud.Bigtable.Admin.V2.GcRule>();
        /// <summary>
        /// Only delete cells which would be deleted by every element of `rules`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Bigtable.Admin.V2.GcRule> Rules {
          get { return rules_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Intersection);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Intersection other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!rules_.Equals(other.rules_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= rules_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          rules_.WriteTo(output, _repeated_rules_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += rules_.CalculateSize(_repeated_rules_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Intersection other) {
          if (other == null) {
            return;
          }
          rules_.Add(other.rules_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                rules_.AddEntriesFrom(input, _repeated_rules_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// A GcRule which deletes cells matching any of the given rules.
      /// </summary>
      public sealed partial class Union : pb::IMessage<Union> {
        private static readonly pb::MessageParser<Union> _parser = new pb::MessageParser<Union>(() => new Union());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Union> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.Bigtable.Admin.V2.GcRule.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Union() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Union(Union other) : this() {
          rules_ = other.rules_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Union Clone() {
          return new Union(this);
        }

        /// <summary>Field number for the "rules" field.</summary>
        public const int RulesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Google.Cloud.Bigtable.Admin.V2.GcRule> _repeated_rules_codec
            = pb::FieldCodec.ForMessage(10, global::Google.Cloud.Bigtable.Admin.V2.GcRule.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.Bigtable.Admin.V2.GcRule> rules_ = new pbc::RepeatedField<global::Google.Cloud.Bigtable.Admin.V2.GcRule>();
        /// <summary>
        /// Delete cells which would be deleted by any element of `rules`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Google.Cloud.Bigtable.Admin.V2.GcRule> Rules {
          get { return rules_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Union);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Union other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!rules_.Equals(other.rules_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= rules_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          rules_.WriteTo(output, _repeated_rules_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += rules_.CalculateSize(_repeated_rules_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Union other) {
          if (other == null) {
            return;
          }
          rules_.Add(other.rules_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                rules_.AddEntriesFrom(input, _repeated_rules_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// A snapshot of a table at a particular time. A snapshot can be used as a
  /// checkpoint for data restoration or a data source for a new table.
  ///
  /// Note: This is a private alpha release of Cloud Bigtable snapshots. This
  /// feature is not currently available to most Cloud Bigtable customers. This
  /// feature might be changed in backward-incompatible ways and is not recommended
  /// for production use. It is not subject to any SLA or deprecation policy.
  /// </summary>
  public sealed partial class Snapshot : pb::IMessage<Snapshot> {
    private static readonly pb::MessageParser<Snapshot> _parser = new pb::MessageParser<Snapshot>(() => new Snapshot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Snapshot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Bigtable.Admin.V2.TableReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Snapshot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Snapshot(Snapshot other) : this() {
      name_ = other.name_;
      sourceTable_ = other.sourceTable_ != null ? other.sourceTable_.Clone() : null;
      dataSizeBytes_ = other.dataSizeBytes_;
      createTime_ = other.createTime_ != null ? other.createTime_.Clone() : null;
      deleteTime_ = other.deleteTime_ != null ? other.deleteTime_.Clone() : null;
      state_ = other.state_;
      description_ = other.description_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Snapshot Clone() {
      return new Snapshot(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// (`OutputOnly`)
    /// The unique name of the snapshot.
    /// Values are of the form
    /// `projects/&lt;project>/instances/&lt;instance>/clusters/&lt;cluster>/snapshots/&lt;snapshot>`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source_table" field.</summary>
    public const int SourceTableFieldNumber = 2;
    private global::Google.Cloud.Bigtable.Admin.V2.Table sourceTable_;
    /// <summary>
    /// (`OutputOnly`)
    /// The source table at the time the snapshot was taken.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Bigtable.Admin.V2.Table SourceTable {
      get { return sourceTable_; }
      set {
        sourceTable_ = value;
      }
    }

    /// <summary>Field number for the "data_size_bytes" field.</summary>
    public const int DataSizeBytesFieldNumber = 3;
    private long dataSizeBytes_;
    /// <summary>
    /// (`OutputOnly`)
    /// The size of the data in the source table at the time the snapshot was
    /// taken. In some cases, this value may be computed asynchronously via a
    /// background process and a placeholder of 0 will be used in the meantime.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DataSizeBytes {
      get { return dataSizeBytes_; }
      set {
        dataSizeBytes_ = value;
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// (`OutputOnly`)
    /// The time when the snapshot is created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "delete_time" field.</summary>
    public const int DeleteTimeFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp deleteTime_;
    /// <summary>
    /// (`OutputOnly`)
    /// The time when the snapshot will be deleted. The maximum amount of time a
    /// snapshot can stay active is 365 days. If 'ttl' is not specified,
    /// the default maximum of 365 days will be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp DeleteTime {
      get { return deleteTime_; }
      set {
        deleteTime_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 6;
    private global::Google.Cloud.Bigtable.Admin.V2.Snapshot.Types.State state_ = 0;
    /// <summary>
    /// (`OutputOnly`)
    /// The current state of the snapshot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Cloud.Bigtable.Admin.V2.Snapshot.Types.State State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 7;
    private string description_ = "";
    /// <summary>
    /// (`OutputOnly`)
    /// Description of the snapshot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Snapshot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Snapshot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(SourceTable, other.SourceTable)) return false;
      if (DataSizeBytes != other.DataSizeBytes) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (!object.Equals(DeleteTime, other.DeleteTime)) return false;
      if (State != other.State) return false;
      if (Description != other.Description) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (sourceTable_ != null) hash ^= SourceTable.GetHashCode();
      if (DataSizeBytes != 0L) hash ^= DataSizeBytes.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (deleteTime_ != null) hash ^= DeleteTime.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (sourceTable_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SourceTable);
      }
      if (DataSizeBytes != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(DataSizeBytes);
      }
      if (createTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CreateTime);
      }
      if (deleteTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DeleteTime);
      }
      if (State != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) State);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Description);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (sourceTable_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourceTable);
      }
      if (DataSizeBytes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DataSizeBytes);
      }
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (deleteTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeleteTime);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Snapshot other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.sourceTable_ != null) {
        if (sourceTable_ == null) {
          SourceTable = new global::Google.Cloud.Bigtable.Admin.V2.Table();
        }
        SourceTable.MergeFrom(other.SourceTable);
      }
      if (other.DataSizeBytes != 0L) {
        DataSizeBytes = other.DataSizeBytes;
      }
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.deleteTime_ != null) {
        if (deleteTime_ == null) {
          DeleteTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        DeleteTime.MergeFrom(other.DeleteTime);
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (sourceTable_ == null) {
              SourceTable = new global::Google.Cloud.Bigtable.Admin.V2.Table();
            }
            input.ReadMessage(SourceTable);
            break;
          }
          case 24: {
            DataSizeBytes = input.ReadInt64();
            break;
          }
          case 34: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 42: {
            if (deleteTime_ == null) {
              DeleteTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(DeleteTime);
            break;
          }
          case 48: {
            State = (global::Google.Cloud.Bigtable.Admin.V2.Snapshot.Types.State) input.ReadEnum();
            break;
          }
          case 58: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Snapshot message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Possible states of a snapshot.
      /// </summary>
      public enum State {
        /// <summary>
        /// The state of the snapshot could not be determined.
        /// </summary>
        [pbr::OriginalName("STATE_NOT_KNOWN")] NotKnown = 0,
        /// <summary>
        /// The snapshot has been successfully created and can serve all requests.
        /// </summary>
        [pbr::OriginalName("READY")] Ready = 1,
        /// <summary>
        /// The snapshot is currently being created, and may be destroyed if the
        /// creation process encounters an error. A snapshot may not be restored to a
        /// table while it is being created.
        /// </summary>
        [pbr::OriginalName("CREATING")] Creating = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
