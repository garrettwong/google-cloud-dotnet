// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/datastore/admin/v1/datastore_admin.proto
// </auto-generated>
// Original file comments:
// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Datastore.Admin.V1 {
  /// <summary>
  /// Google Cloud Datastore Admin API
  ///
  /// The Datastore Admin API provides several admin services for Cloud Datastore.
  ///
  /// -----------------------------------------------------------------------------
  /// ## Concepts
  ///
  /// Project, namespace, kind, and entity as defined in the Google Cloud Datastore
  /// API.
  ///
  /// Operation: An Operation represents work being performed in the background.
  ///
  /// EntityFilter: Allows specifying a subset of entities in a project. This is
  /// specified as a combination of kinds and namespaces (either or both of which
  /// may be all).
  ///
  /// -----------------------------------------------------------------------------
  /// ## Services
  ///
  /// # Export/Import
  ///
  /// The Export/Import service provides the ability to copy all or a subset of
  /// entities to/from Google Cloud Storage.
  ///
  /// Exported data may be imported into Cloud Datastore for any Google Cloud
  /// Platform project. It is not restricted to the export source project. It is
  /// possible to export from one project and then import into another.
  ///
  /// Exported data can also be loaded into Google BigQuery for analysis.
  ///
  /// Exports and imports are performed asynchronously. An Operation resource is
  /// created for each export/import. The state (including any errors encountered)
  /// of the export/import may be queried via the Operation resource.
  ///
  /// # Index
  ///
  /// The index service manages Cloud Datastore composite indexes.
  ///
  /// Index creation and deletion are performed asynchronously.
  /// An Operation resource is created for each such asynchronous operation.
  /// The state of the operation (including any errors encountered)
  /// may be queried via the Operation resource.
  ///
  /// # Operation
  ///
  /// The Operations collection provides a record of actions performed for the
  /// specified project (including any operations in progress). Operations are not
  /// created directly but through calls on other collections or resources.
  ///
  /// An operation that is not yet done may be cancelled. The request to cancel is
  /// asynchronous and the operation may continue to run for some time after the
  /// request to cancel is made.
  ///
  /// An operation that is done may be deleted so that it is no longer listed as
  /// part of the Operation collection.
  ///
  /// ListOperations returns all pending operations, but not completed operations.
  ///
  /// Operations are created by service DatastoreAdmin,
  /// but are accessed via service google.longrunning.Operations.
  /// </summary>
  public static partial class DatastoreAdmin
  {
    static readonly string __ServiceName = "google.datastore.admin.v1.DatastoreAdmin";

    static readonly grpc::Marshaller<global::Google.Cloud.Datastore.Admin.V1.ExportEntitiesRequest> __Marshaller_google_datastore_admin_v1_ExportEntitiesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Datastore.Admin.V1.ExportEntitiesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.LongRunning.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Datastore.Admin.V1.ImportEntitiesRequest> __Marshaller_google_datastore_admin_v1_ImportEntitiesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Datastore.Admin.V1.ImportEntitiesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Datastore.Admin.V1.GetIndexRequest> __Marshaller_google_datastore_admin_v1_GetIndexRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Datastore.Admin.V1.GetIndexRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Datastore.Admin.V1.Index> __Marshaller_google_datastore_admin_v1_Index = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Datastore.Admin.V1.Index.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Datastore.Admin.V1.ListIndexesRequest> __Marshaller_google_datastore_admin_v1_ListIndexesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Datastore.Admin.V1.ListIndexesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Cloud.Datastore.Admin.V1.ListIndexesResponse> __Marshaller_google_datastore_admin_v1_ListIndexesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Cloud.Datastore.Admin.V1.ListIndexesResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Cloud.Datastore.Admin.V1.ExportEntitiesRequest, global::Google.LongRunning.Operation> __Method_ExportEntities = new grpc::Method<global::Google.Cloud.Datastore.Admin.V1.ExportEntitiesRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExportEntities",
        __Marshaller_google_datastore_admin_v1_ExportEntitiesRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Cloud.Datastore.Admin.V1.ImportEntitiesRequest, global::Google.LongRunning.Operation> __Method_ImportEntities = new grpc::Method<global::Google.Cloud.Datastore.Admin.V1.ImportEntitiesRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ImportEntities",
        __Marshaller_google_datastore_admin_v1_ImportEntitiesRequest,
        __Marshaller_google_longrunning_Operation);

    static readonly grpc::Method<global::Google.Cloud.Datastore.Admin.V1.GetIndexRequest, global::Google.Cloud.Datastore.Admin.V1.Index> __Method_GetIndex = new grpc::Method<global::Google.Cloud.Datastore.Admin.V1.GetIndexRequest, global::Google.Cloud.Datastore.Admin.V1.Index>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIndex",
        __Marshaller_google_datastore_admin_v1_GetIndexRequest,
        __Marshaller_google_datastore_admin_v1_Index);

    static readonly grpc::Method<global::Google.Cloud.Datastore.Admin.V1.ListIndexesRequest, global::Google.Cloud.Datastore.Admin.V1.ListIndexesResponse> __Method_ListIndexes = new grpc::Method<global::Google.Cloud.Datastore.Admin.V1.ListIndexesRequest, global::Google.Cloud.Datastore.Admin.V1.ListIndexesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListIndexes",
        __Marshaller_google_datastore_admin_v1_ListIndexesRequest,
        __Marshaller_google_datastore_admin_v1_ListIndexesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Datastore.Admin.V1.DatastoreAdminReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DatastoreAdmin</summary>
    [grpc::BindServiceMethod(typeof(DatastoreAdmin), "BindService")]
    public abstract partial class DatastoreAdminBase
    {
      /// <summary>
      /// Exports a copy of all or a subset of entities from Google Cloud Datastore
      /// to another storage system, such as Google Cloud Storage. Recent updates to
      /// entities may not be reflected in the export. The export occurs in the
      /// background and its progress can be monitored and managed via the
      /// Operation resource that is created. The output of an export may only be
      /// used once the associated operation is done. If an export operation is
      /// cancelled before completion it may leave partial data behind in Google
      /// Cloud Storage.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> ExportEntities(global::Google.Cloud.Datastore.Admin.V1.ExportEntitiesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Imports entities into Google Cloud Datastore. Existing entities with the
      /// same key are overwritten. The import occurs in the background and its
      /// progress can be monitored and managed via the Operation resource that is
      /// created. If an ImportEntities operation is cancelled, it is possible
      /// that a subset of the data has already been imported to Cloud Datastore.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> ImportEntities(global::Google.Cloud.Datastore.Admin.V1.ImportEntitiesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets an index.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Datastore.Admin.V1.Index> GetIndex(global::Google.Cloud.Datastore.Admin.V1.GetIndexRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the indexes that match the specified filters.  Datastore uses an
      /// eventually consistent query to fetch the list of indexes and may
      /// occasionally return stale results.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Datastore.Admin.V1.ListIndexesResponse> ListIndexes(global::Google.Cloud.Datastore.Admin.V1.ListIndexesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DatastoreAdmin</summary>
    public partial class DatastoreAdminClient : grpc::ClientBase<DatastoreAdminClient>
    {
      /// <summary>Creates a new client for DatastoreAdmin</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DatastoreAdminClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DatastoreAdmin that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DatastoreAdminClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DatastoreAdminClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DatastoreAdminClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Exports a copy of all or a subset of entities from Google Cloud Datastore
      /// to another storage system, such as Google Cloud Storage. Recent updates to
      /// entities may not be reflected in the export. The export occurs in the
      /// background and its progress can be monitored and managed via the
      /// Operation resource that is created. The output of an export may only be
      /// used once the associated operation is done. If an export operation is
      /// cancelled before completion it may leave partial data behind in Google
      /// Cloud Storage.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation ExportEntities(global::Google.Cloud.Datastore.Admin.V1.ExportEntitiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExportEntities(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Exports a copy of all or a subset of entities from Google Cloud Datastore
      /// to another storage system, such as Google Cloud Storage. Recent updates to
      /// entities may not be reflected in the export. The export occurs in the
      /// background and its progress can be monitored and managed via the
      /// Operation resource that is created. The output of an export may only be
      /// used once the associated operation is done. If an export operation is
      /// cancelled before completion it may leave partial data behind in Google
      /// Cloud Storage.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation ExportEntities(global::Google.Cloud.Datastore.Admin.V1.ExportEntitiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExportEntities, null, options, request);
      }
      /// <summary>
      /// Exports a copy of all or a subset of entities from Google Cloud Datastore
      /// to another storage system, such as Google Cloud Storage. Recent updates to
      /// entities may not be reflected in the export. The export occurs in the
      /// background and its progress can be monitored and managed via the
      /// Operation resource that is created. The output of an export may only be
      /// used once the associated operation is done. If an export operation is
      /// cancelled before completion it may leave partial data behind in Google
      /// Cloud Storage.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ExportEntitiesAsync(global::Google.Cloud.Datastore.Admin.V1.ExportEntitiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExportEntitiesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Exports a copy of all or a subset of entities from Google Cloud Datastore
      /// to another storage system, such as Google Cloud Storage. Recent updates to
      /// entities may not be reflected in the export. The export occurs in the
      /// background and its progress can be monitored and managed via the
      /// Operation resource that is created. The output of an export may only be
      /// used once the associated operation is done. If an export operation is
      /// cancelled before completion it may leave partial data behind in Google
      /// Cloud Storage.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ExportEntitiesAsync(global::Google.Cloud.Datastore.Admin.V1.ExportEntitiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExportEntities, null, options, request);
      }
      /// <summary>
      /// Imports entities into Google Cloud Datastore. Existing entities with the
      /// same key are overwritten. The import occurs in the background and its
      /// progress can be monitored and managed via the Operation resource that is
      /// created. If an ImportEntities operation is cancelled, it is possible
      /// that a subset of the data has already been imported to Cloud Datastore.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation ImportEntities(global::Google.Cloud.Datastore.Admin.V1.ImportEntitiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ImportEntities(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Imports entities into Google Cloud Datastore. Existing entities with the
      /// same key are overwritten. The import occurs in the background and its
      /// progress can be monitored and managed via the Operation resource that is
      /// created. If an ImportEntities operation is cancelled, it is possible
      /// that a subset of the data has already been imported to Cloud Datastore.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.LongRunning.Operation ImportEntities(global::Google.Cloud.Datastore.Admin.V1.ImportEntitiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ImportEntities, null, options, request);
      }
      /// <summary>
      /// Imports entities into Google Cloud Datastore. Existing entities with the
      /// same key are overwritten. The import occurs in the background and its
      /// progress can be monitored and managed via the Operation resource that is
      /// created. If an ImportEntities operation is cancelled, it is possible
      /// that a subset of the data has already been imported to Cloud Datastore.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ImportEntitiesAsync(global::Google.Cloud.Datastore.Admin.V1.ImportEntitiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ImportEntitiesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Imports entities into Google Cloud Datastore. Existing entities with the
      /// same key are overwritten. The import occurs in the background and its
      /// progress can be monitored and managed via the Operation resource that is
      /// created. If an ImportEntities operation is cancelled, it is possible
      /// that a subset of the data has already been imported to Cloud Datastore.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ImportEntitiesAsync(global::Google.Cloud.Datastore.Admin.V1.ImportEntitiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ImportEntities, null, options, request);
      }
      /// <summary>
      /// Gets an index.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Datastore.Admin.V1.Index GetIndex(global::Google.Cloud.Datastore.Admin.V1.GetIndexRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIndex(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets an index.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Datastore.Admin.V1.Index GetIndex(global::Google.Cloud.Datastore.Admin.V1.GetIndexRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIndex, null, options, request);
      }
      /// <summary>
      /// Gets an index.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Datastore.Admin.V1.Index> GetIndexAsync(global::Google.Cloud.Datastore.Admin.V1.GetIndexRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIndexAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets an index.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Datastore.Admin.V1.Index> GetIndexAsync(global::Google.Cloud.Datastore.Admin.V1.GetIndexRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIndex, null, options, request);
      }
      /// <summary>
      /// Lists the indexes that match the specified filters.  Datastore uses an
      /// eventually consistent query to fetch the list of indexes and may
      /// occasionally return stale results.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Datastore.Admin.V1.ListIndexesResponse ListIndexes(global::Google.Cloud.Datastore.Admin.V1.ListIndexesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListIndexes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the indexes that match the specified filters.  Datastore uses an
      /// eventually consistent query to fetch the list of indexes and may
      /// occasionally return stale results.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Cloud.Datastore.Admin.V1.ListIndexesResponse ListIndexes(global::Google.Cloud.Datastore.Admin.V1.ListIndexesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListIndexes, null, options, request);
      }
      /// <summary>
      /// Lists the indexes that match the specified filters.  Datastore uses an
      /// eventually consistent query to fetch the list of indexes and may
      /// occasionally return stale results.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Datastore.Admin.V1.ListIndexesResponse> ListIndexesAsync(global::Google.Cloud.Datastore.Admin.V1.ListIndexesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListIndexesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the indexes that match the specified filters.  Datastore uses an
      /// eventually consistent query to fetch the list of indexes and may
      /// occasionally return stale results.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Datastore.Admin.V1.ListIndexesResponse> ListIndexesAsync(global::Google.Cloud.Datastore.Admin.V1.ListIndexesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListIndexes, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DatastoreAdminClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DatastoreAdminClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DatastoreAdminBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ExportEntities, serviceImpl.ExportEntities)
          .AddMethod(__Method_ImportEntities, serviceImpl.ImportEntities)
          .AddMethod(__Method_GetIndex, serviceImpl.GetIndex)
          .AddMethod(__Method_ListIndexes, serviceImpl.ListIndexes).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DatastoreAdminBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ExportEntities, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Datastore.Admin.V1.ExportEntitiesRequest, global::Google.LongRunning.Operation>(serviceImpl.ExportEntities));
      serviceBinder.AddMethod(__Method_ImportEntities, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Datastore.Admin.V1.ImportEntitiesRequest, global::Google.LongRunning.Operation>(serviceImpl.ImportEntities));
      serviceBinder.AddMethod(__Method_GetIndex, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Datastore.Admin.V1.GetIndexRequest, global::Google.Cloud.Datastore.Admin.V1.Index>(serviceImpl.GetIndex));
      serviceBinder.AddMethod(__Method_ListIndexes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Datastore.Admin.V1.ListIndexesRequest, global::Google.Cloud.Datastore.Admin.V1.ListIndexesResponse>(serviceImpl.ListIndexes));
    }

  }
}
#endregion
